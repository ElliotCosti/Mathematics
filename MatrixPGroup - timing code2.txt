load "C:/Users/Elliot/Documents/Mathematics/standard.m";
load "C:/Users/Elliot/Documents/Mathematics/sl.m";
load "C:/Users/Elliot/Documents/Mathematics/MatrixPGroup9.txt";
load "C:/Users/Elliot/Documents/Mathematics/SLAltRep4.txt";

/* THIS CODE ACTS AS A TEST TO CHECK THAT MATRIXPGROUP IS WORKING */

/* Preparing the input */

for d in [10] do 
for p in [7] do
for e in [1..16] do
for i in [1..1] do 

G := SL(d, p^e);

q := #BaseRing(G);

Q := SLChosenElements(G);
QQ := [ExteriorSquare(Q[i]) : i in [1..#Q]];

n := Degree(QQ[1]);
P := RandomProcess(GL(n, q));
A := Random(P);
n, p, e, i;

/* conjugating everything by a random matrix to make the exterior square 
   look random */
_, a1 := WordInGen(G, Q[1]);
_, a2 := WordInGen(G, Q[2]);
_, a3 := WordInGen(G, Q[3]);
_, a4 := WordInGen(G, Q[4]);
Q := [Evaluate(a1, QQ)^A, Evaluate(a2, QQ)^A, Evaluate(a3, QQ)^A, Evaluate(a4, QQ)^A];

E := sub<GL(n, q)|Q>;


   q := #BaseRing(Q[1]);
   F := GF(q);
   w := PrimitiveElement(GF(q));
   M := KMatrixSpace(GF(q), d, d);
   b := Basis(M);
   G := SL(d, q);
   n := Degree(Q[1]);

   K, kk, S := GetK(E, Q, d, q);
   KE := K[1];
   KE2 := K[2];


P := RandomProcess(KE);
A := Random(P);
time word := MatrixPGroupWordInGen (A, KE); 
time word := MatrixPGroupWordInGen (A, KE); 

W, phi := WordGroup (KE);
if #S ne 0 then
   assert Evaluate(word, kk) eq A;
else
   assert word eq W!1;
end if;

end for;
end for;
end for;
end for;
