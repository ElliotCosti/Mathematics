CreateSymplecticGenerators := function(G);

F := BaseRing (G);
w := PrimitiveElement (F);
d := Dimension(G);
M := KMatrixSpace(F, d, d); 
b := Basis(M);
Z := IntegerRing();
G := SL(d, F);

CB := ZeroMatrix(F, d, d);
for i in [1..(d div 2)] do
   CB := CB + b[(i-1)*d + 2*i - 1];
end for;
for i in [1..(d div 2)] do
   CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
end for;
   CB := G!CB;
   
if d ne 2 then
   u := M!Id(G) - b[1] - b[d+2]- b[(d-1)*d-1] - b[d*d] + b[2] + b[d+1] + b[(d-1)*d] + b[d*d-1];
      u := G!u;
else
   u := -b[2]+b[3];
end if;

v := ZeroMatrix(F, d, d);
for i in [1..(d div 2 - 1)] do
   v := v + b[(2*i-2)*d + 2*i + 1];
end for;
v := v + b[d*d - 2*d + 1];
for i in [1..(d div 2 -1)] do
   v := v + b[(2*i -1)*d + 2*i + 2];
end for;
v := v + b[d*d - d + 2];
   v := G!v;

x := M!Id(G) + b[d+3] + b[3*d+1];
   x := G!x;

t := M!Id(G) + b[d];
   t := G!t;

delta := M!Id(G) - b[1] - b[d*d] + w*b[1] + (w^-1)*(b[d*d]);
   delta := G!delta;

delta := delta^CB;
t := t^CB;
u := u^CB;

s := M!Id(G) - b[1] - b[2] - b[d+2] + b[d+1]; 
   s := G!s; 

return [delta, s, t, u, v, x], CB;

end function;

SymplecticWordInGen := function(G, A);

d := Dimension(G);
q := #BaseRing(G);
F<w> := BaseRing(G);
w := PrimitiveElement(F);
G := SL(d, q);
e := Factorisation(q)[1][2];

M := KMatrixSpace(GF(q), d, d);
V := VectorSpace(GF(q), d);
b := Basis(M);

CB := ZeroMatrix(GF(q), d, d);
for i in [1..(d div 2)] do
   CB := CB + b[(i-1)*d + 2*i - 1];
end for;
for i in [1..(d div 2)] do
   CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
end for;
   CB := G!CB;

A := G!(A^CB);

// GG := sub<SL(d, q)|delta, s, t, u, v, x>;
SLP := SLPGroup(6);
S1 := Id(SLP);
S2 := Id(SLP);
Z := IntegerRing();

FF := sub<F|w^2>;
// FF.1 eq (F.1)^2; <- this will be true
py := FF!F.1;

/*py is now a polynomial in w^2 that is equal to w*/

// O := Id(G);
OO := Id(SLP);
for i in [1..e] do
   // O := O*(t^delta^-(i-1))^Z!Eltseq(py)[i];
   OO := OO*(SLP.3^SLP.1^-(i-1))^Z!Eltseq(py)[i];
end for;

block := d div 2; // the number of blocks

/* BB is an element of GF(q). This algorithm returns the transvection with BB in the [2, 1] position */

GetBBTransvection := function(BB);

   // T := t^-1;
   TT := SLP.3^-1;
   // T := (T^s)^Z!Eltseq(BB)[1];
   TT := (TT^SLP.2)^Z!Eltseq(BB)[1];

   for r in [2..e] do
      if IsEven(r) then
         // o := O^-1;
         oo := OO^-1;
         // o := o^(delta^-Z!((r-2)/2));
         oo := oo^(SLP.1^-Z!((r-2)/2));
         // o := (o^s)^Z!Eltseq(BB)[r];
         oo := (oo^SLP.2)^Z!Eltseq(BB)[r];
         // T := T*o;
         TT := TT*oo;
      else
         // o := t^-1;
         oo := SLP.3^-1;
         // o := o^(delta^-Z!((r-1)/2));
         oo := oo^(SLP.1^-Z!((r-1)/2));
         // o := (o^s)^Z!Eltseq(BB)[r];
         oo := (oo^SLP.2)^Z!Eltseq(BB)[r];
         // T := T*o;
         TT := TT*oo;
      end if;
   end for;

   return TT;

end function;

/* This function gets a 1 in the [1, 1] position of A */

GetAOne := procedure(~A, ~S1, ~S2);

/* what happens if A[1, 1] is 0 */

if A[1, 1] eq 0 then 
   i := Depth(A[1]);
   if IsEven(i) then j := i div 2;
   else j := Z!(i/2 + 1/2); end if;
   if i eq 2 then
      // A := A*s;
      MultiplyColumn(~A, -1, 1);
      SwapColumns(~A, 1, 2);
      S2 := S2*SLP.2;
   else
      // A := A*(u*v^-1)^(j-2)*(u*v)^(j-2)*u; // swaps block 1 with block j, this will never move any columns that have
      // already been done because those columns will always contain a 0 in the first row at this stage.
      SwapColumns(~A, 1, 2*j - 1);
      SwapColumns(~A, 2, 2*j);
      S2 := S2*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4;
   end if;
   if A[1, 1] eq 0 then
      // A := A*s;
      MultiplyColumn(~A, -1, 1);
      SwapColumns(~A, 1, 2);
      S2 := S2*SLP.2;
   end if;
end if; 

if A[1, 1] ne 1 then
   i := 2;
   while A[1, i] eq 0 do
      i := i+1;
      if i eq d+1 then break; end if;
   end while;
   if i eq d+1 then
      z := Log(1/A[1, 1]);
      // A := delta^z * A;
      MultiplyRow(~A, w^z, 1);
      MultiplyRow(~A, (w^-1)^z, 2);
      S1 := SLP.1^z * S1;
   end if;
   
   if i eq 2 then
   // here we add the necessary multiple of column 2 to column 1 to make A[1, 1] = 1

      BB := (1-A[1, 1])/A[1, 2];
      TT := GetBBTransvection(BB);
      AddColumn(~A, BB, 2, 1);
      // A := A*T;
      S2 := S2*TT;

   elif i eq d+1 then
      A := A;
   else
   // we jump to this subroutine if A[1, 2] = 0
      
      BB := (1-A[1, 1])/A[1, i];
      TT := GetBBTransvection(BB);

      if IsEven(i) then j := i div 2;
      else j := Z!(i/2 + 1/2); end if;
      if j eq 2 then
         A := A;
      else
         // A := A*(u*v^-1)^(j-2)*(u*v)^(j-2)*(u*v^-1)^(j-2)*(u*v)^(j-2)*u;
	 // swaps block 2 with block j to get the block with the non-zero entry as the second block of A
         SwapColumns(~A, 3, 2*j - 1);
         SwapColumns(~A, 4, 2*j);
         S2 := S2*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4;
      end if;
      // A := A*s; // puts the entry you wish to make equal to 1 in A[1, 2]
      MultiplyColumn(~A, -1, 1);
      SwapColumns(~A, 1, 2);
      S2 := S2*SLP.2;
      // A := A*u; // puts the entry you wish to make equal to 1 in A[1, 4]
         SwapColumns(~A, 1, 3);
	 SwapColumns(~A, 2, 4);
      S2 := S2 * SLP.4;
      
      // we now add column 4 to 1 and column 2 to 3 in order that, when we stick all the columns back again,
      // there will be a non-zero entry in the A[1, 2] position
      if IsEven(i) then 
         // A := A*x;
         AddColumn(~A, 1, 4, 1);
         AddColumn(~A, 1, 2, 3);
         S2 := S2*SLP.6;
      else
         // A := A*s*x*(s^-1);
         MultiplyColumn(~A, -1, 1); // s
         SwapColumns(~A, 1, 2); // s
         AddColumn(~A, 1, 4, 1); // x
         AddColumn(~A, 1, 2, 3); // x
         SwapColumns(~A, 1, 2); // s^-1
	 MultiplyColumn(~A, -1, 1); // s^-1
         S2 := S2*SLP.2*SLP.6*(SLP.2 ^-1);
      end if;
      
      // we now proceed to stick all the columns back again
      // A := A*(u^-1);
      SwapColumns(~A, 1, 3);
      SwapColumns(~A, 2, 4);
      S2 := S2*(SLP.4 ^-1);
      // A := A*(s^-1);
      SwapColumns(~A, 1, 2); // s^-1
      MultiplyColumn(~A, -1, 1); // s^-1
      S2 := S2*(SLP.2 ^-1);
      if j ne 2 then
         // A := A*(((u*v^-1)^(j-2)*(u*v)^(j-2)*(u*v^-1)^(j-2)*(u*v)^(j-2)*u)^-1); // swaps block 2 with block j
	 SwapColumns(~A, 3, 2*j -1);
	 SwapColumns(~A, 4, 2*j);
         S2 := S2*(((SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4)^-1);
      end if;
      BB := (1-A[1, 1])/A[1, 2];
      TT := GetBBTransvection(BB);
      // A := A*T;
      AddColumn(~A, BB, 2, 1);
      S2 := S2*TT;
   end if;
end if;

end procedure;

ExtractColumn := function(A, i);
   
   v := [];
   for j in [1..d] do
      Append(~v, A[j, i]);
   end for;
   
   return v;

end function;

/* kills the A[1, 3] entry */

KillPlace := procedure(~A, ~S1, ~S2);

for r in [1..e] do
   S2 := S2*((SLP.6^(SLP.1^(r-1)))^Z!Eltseq(A[1, 3])[r]);
   // A := A*((x^(delta^(r-1)))^Z!Eltseq(A[1, 3])[r]);
   AddColumn(~A, Eltseq(A[1, 3])[r]*w^(r-1), 4, 1);
   AddColumn(~A, Eltseq(A[1, 3])[r]*w^(r-1), 2, 3);
end for;

end procedure;

for k in [1..block] do

GetAOne(~A, ~S1, ~S2);

// A := A*s; // swaps first two columns
MultiplyColumn(~A, -1, 1); // s
SwapColumns(~A, 1, 2); // s
S2 := S2*SLP.2;

for l in [1..block-1] do

KillPlace(~A, ~S1, ~S2);

// A := A*u*s*u; // swaps the third and fourth columns so that we can work on the f part of the block.
SwapColumns(~A, 3, 4);
MultiplyColumn(~A, -1, 4);

S2 := S2*SLP.4*SLP.2*SLP.4;

KillPlace(~A, ~S1, ~S2);

// A := A*((u*s*u)^-1); // swaps the third and fourth columns back again
MultiplyColumn(~A, -1, 4);
SwapColumns(~A, 3, 4);
S2 := S2*((SLP.4*SLP.2*SLP.4)^-1);
// A := A*(v*u); // vu is the (2..d/2) cycle on the blocks

for i in [2..(d/2 - 1)] do

   SwapColumns(~A, 2*i - 1, d-1);
   SwapColumns(~A, 2*i, d);

end for;

// B := Transpose(A);
// C := ZeroMatrix(F, d, d);
//    C[1] := B[1];
//    C[2] := B[2];
//    C[3] := B[d-1];
//    C[4] := B[d];
// for i in [3..(d div 2)] do
//    C[2*i - 1] := B[2*i - 3];
//    C[2*i] := B[2*i - 2];
// end for;
// A := Transpose(C);

S2 := S2*(SLP.5*SLP.4);

end for;

// A := A*(s^-1); // swaps first two columns back again
SwapColumns(~A, 1, 2); // s^-1
MultiplyColumn(~A, -1, 1); // s^-1
S2 := S2*(SLP.2^-1);

S2 := S2*(SLP.3^Z!-Eltseq(A[1, 2])[1]);
// A := A*(t^Z!-Eltseq(A[1, 2])[1]);
// T := Id(G);
TT := Id(SLP);
for r in [2..e] do
   if IsEven(r) then
      // o := O^(delta^-((r-2) div 2));
      oo := OO^(SLP.1^-((r-2) div 2));
      // o := o^Z!Eltseq(A[1, 2])[r];
      oo := oo^Z!Eltseq(A[1, 2])[r];
      // T := T*o;
      TT := TT*oo;
   else
      // o := t^(delta^-Z!((r-1) div 2));
      oo := SLP.3^(SLP.1^-Z!((r-1) div 2));
      // o := o^Z!Eltseq(A[1, 2])[r];
      oo := oo^Z!Eltseq(A[1, 2])[r];
      // T := T*o;
      TT := TT*oo;
   end if;
end for;
// A := A*(T^-1);
for r in [1..e] do
   AddColumn(~A, -Eltseq(A[1, 2])[r]*w^(r-1), 1, 2);
end for;
S2 := S2*(TT^-1);

/* now we do the second row */

// A := s*A; // swaps the first two rows
SwapRows(~A, 1, 2);
MultiplyRow(~A, -1, 1);
S1 := SLP.2*S1;

for l in [1..block-1] do

KillPlace(~A, ~S1, ~S2);

// A := A*u*s*u; // swaps the third and fourth columns so that we can work on the f part of the block.
SwapColumns(~A, 3, 4);
MultiplyColumn(~A, -1, 4);
S2 := S2*SLP.4*SLP.2*SLP.4;

KillPlace(~A, ~S1, ~S2);

// A := A*((u*s*u)^-1); // swaps the third and fourth columns back again
MultiplyColumn(~A, -1, 4);
SwapColumns(~A, 3, 4);
S2 := S2*((SLP.4*SLP.2*SLP.4)^-1);

// A := A*(v*u); // vu is the (2..d/2) cycle on the blocks

for i in [2..(d/2 - 1)] do

   SwapColumns(~A, 2*i - 1, d-1);
   SwapColumns(~A, 2*i, d);

end for;

// B := Transpose(A);
// C := ZeroMatrix(F, d, d);
//    C[1] := B[1];
//    C[2] := B[2];
//    C[3] := B[d-1];
//    C[4] := B[d];
// for i in [3..(d div 2)] do
//    C[2*i - 1] := B[2*i - 3];
//    C[2*i] := B[2*i - 2];
// end for;
// A := Transpose(C);

S2 := S2*(SLP.5*SLP.4);

end for;

// A := A*(s^-1); // swaps first two columns back again
SwapColumns(~A, 1, 2);
MultiplyColumn(~A, -1, 1);
S2 := S2*(SLP.2 ^-1);

S2 := S2*(SLP.3^Z!-Eltseq(A[1, 2])[1]);
// A := A*(t^Z!-Eltseq(A[1, 2])[1]);
// T := Id(G);
TT := Id(SLP);
for r in [2..e] do
   if IsEven(r) then
      // o := O^(delta^-((r-2) div 2));
      oo := OO^(SLP.1^-((r-2) div 2));
      // o := o^Z!Eltseq(A[1, 2])[r];
      oo := oo^Z!Eltseq(A[1, 2])[r];
      // T := T*o;
      TT := TT*oo;
   else
      // o := t^(delta^-((r-1) div 2));
      oo := SLP.3^(SLP.1^-((r-1) div 2));
      // o := o^Z!Eltseq(A[1, 2])[r];
      oo := oo^Z!Eltseq(A[1, 2])[r];
      // T := T*o;
      TT := TT*oo;
   end if;
end for;
// A := A*(T^-1);
S2 := S2*(TT^-1);
for r in [1..e] do
   AddColumn(~A, -Eltseq(A[1, 2])[r]*w^(r-1), 1, 2);
end for;

// A := A^(v^-1);
B := Transpose(A);
C := ZeroMatrix(F, d, d);
for i in [1..d-2] do
   C[i] := B[i + 2];
end for;
C[d-1] := B[1];
C[d] := B[2];
A := Transpose(C);

C := ZeroMatrix(F, d, d);
B := A;
for i in [1..d-2] do
   C[i] := B[i + 2];
end for;
C[d-1] := B[1];
C[d] := B[2];
A := C;

S2 := S2*(SLP.5^-1);
S1 := (SLP.5)*S1;

end for;

return A, (S1^-1)*(S2^-1);

end function;


