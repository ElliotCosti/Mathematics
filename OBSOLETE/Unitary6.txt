CreateUnitaryGenerators := function(G);

F := BaseRing (G);
w := PrimitiveElement(F);
d := Dimension(G);
M := KMatrixSpace(F, d, d); 
b := Basis(M);
e := Degree(F);
p := Characteristic(F);
q := p^(e div 2);
Z := IntegerRing();
G := SL(d, F);
a := w^((q+1) div 2);
if IsEven(q) then
   a := Root(w^(q+1), 2);
end if;

CB := ZeroMatrix(F, d, d);
for i in [1..(d div 2)] do
   CB := CB + b[(i-1)*d + 2*i - 1];
end for;
for i in [1..(d div 2)] do
   CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
end for;
   CB := G!CB;
   
if d ne 2 then
   u := M!Id(G) - b[1] - b[d+2]- b[(d-1)*d-1] - b[d*d] + b[2] + b[d+1] + b[(d-1)*d] + b[d*d-1];
      u := G!u;
else
   u := -b[2]+b[3];
end if;

v := ZeroMatrix(F, d, d);
for i in [1..(d div 2 - 1)] do
   v := v + b[(2*i-2)*d + 2*i + 1];
end for;
v := v + b[d*d - 2*d + 1];
for i in [1..(d div 2 -1)] do
   v := v + b[(2*i -1)*d + 2*i + 2];
end for;
v := v + b[d*d - d + 2];
   v := G!v;

x := M!Id(G) + b[3] - b[3*d+2];
   x := G!x;

t := M!Id(G) + b[d]*a;
   t := G!t;

delta := M!Id(G) - b[1] - b[d*d] + w^(q+1)*b[1] + (w^-(q+1))*(b[d*d]);
   delta := G!delta;

delta := delta^CB;
t := t^CB;
u := u^CB;

s := M!Id(G) - b[1] + a*b[2] - b[d+2] + (a^-q)*b[d+1]; 
   s := G!s; 
   
y := M!Id(G) - b[1] - b[d+2] - b[2*d+3] - b[3*d+4] + b[1]*w + b[d+2]*w^-q + b[2*d+3]*w^-1 + b[3*d+4]*w^q;
   y := G!y;

return [delta, s, t, u, v, x, y], CB;

end function;

UnitaryWordInGen := function(G, A);

d := Dimension(G);
F<w> := BaseRing(G);
w := PrimitiveElement(F);
G := SL(d, F);
e := Degree(F);

Z := IntegerRing();
p := Characteristic(F);
q := p^(e div 2);
M := KMatrixSpace(GF(q), d, d);
V := VectorSpace(GF(q), d);
b := Basis(M);

CB := ZeroMatrix(GF(q), d, d);
for i in [1..(d div 2)] do
   CB := CB + b[(i-1)*d + 2*i - 1];
end for;
for i in [1..(d div 2)] do
   CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
end for;
   CB := G!CB;

A := G!(A^CB);

// GG := sub<SL(d, q)|delta, s, t, u, v, x, y>;
SLP := SLPGroup(7);
S1 := Id(SLP);
S2 := Id(SLP);
a := w^((q+1) div 2);
if IsEven(q) then
   a := Root(w^(q+1), 2);
end if;

FF := sub<F|w^2>;
// FF.1 eq (F.1)^2; <- this will be true
py := FF!F.1;

/*py is now a polynomial in w^2 that is equal to w*/
/* the next piece of code creates the element that looks like x but with an omega in the [1, 3] slot */

// OX := Id(G);
OOX := Id(SLP);
for i in [1..e] do
   // OX := OX*(x^(y^-(i-1)))^Z!Eltseq(py)[i];
   OOX := OOX*(SLP.6^(SLP.7^-(i-1)))^Z!Eltseq(py)[i];
end for;

block := d div 2; // the number of blocks

/* Puts - a^-1 in the A[1, 1] position so that when you do A*s, you get a -1 in the A[1, 2] place */

/* NEEDS TO BE CHANGED! THIS IS A FUDGE INVOLVING DISCRETE LOG AND MUST BE CHANGED A LA SYMPLECTIC AND ORTHOGONAL */

GetAOneByY := procedure(~A, ~S1, ~S2);

   z := Log(1/A[1, 1]);
   // A := y^z * A;
   MultiplyRow(~A, w^z, 1);
   MultiplyRow(~A, (w^-q)^z, 2);
   MultiplyRow(~A, (w^-1)^z, 3);
   MultiplyRow(~A, (w^q)^z, 4);
   S1 := SLP.7^z * S1;

end procedure;

GetBBTransvection := function(BB);

   // T := x^-1;
   TT := SLP.6^-1;
   // T := T^Z!Eltseq(BB)[1];
   TT := TT^Z!Eltseq(BB)[1];

   for r in [2..e] do
      if IsEven(r) then
         // o := OX^-1;
         oo := OOX^-1;
         // o := o^(y^-Z!((r-2)/2));
         oo := oo^(SLP.7^-Z!((r-2)/2));
         // o := o^Z!Eltseq(BB)[r];
         oo := oo^Z!Eltseq(BB)[r];
	 // T := T*o;
         TT := TT*oo;
      else
         // o := x^-1;
         oo := SLP.6^-1;
         // o := o^(y^-Z!((r-1)/2));
         oo := oo^(SLP.7^-Z!((r-1)/2));
         // o := o^Z!Eltseq(BB)[r];
         oo := oo^Z!Eltseq(BB)[r];
         // T := T*o;
         TT := TT*oo;
      end if;
   end for;

   return TT;

end function;

GetAOne := procedure(~A, ~S1, ~S2);

   /* if A[1, 1] eq 0 */

   if A[1, 1] eq 0 then 
      i := Depth(A[1]);
      if IsEven(i) then j := i div 2;
      else j := Z!(i/2 + 1/2); end if; // find which block we need
      if i eq 2 then
         // A := A*s;
	 SwapColumns(~A, 1, 2);
	 MultiplyColumn(~A, a, 2);
	 MultiplyColumn(~A, a^-q, 1);
	 S2 := S2*SLP.2;
      else
         // A := A*(u*v^-1)^(j-2)*(u*v)^(j-2)*u;
	 /* swap blocks 1 and j */
         SwapColumns(~A, 1, 2*j - 1);
	 SwapColumns(~A, 2, 2*j);
	 S2 := S2*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4; 
      end if;
      if A[1, 1] eq 0 then
         // A := A*s;
	 SwapColumns(~A, 1, 2);
	 MultiplyColumn(~A, a, 2);
	 MultiplyColumn(~A, a^-q, 1);
	 S2 := S2*SLP.2;
      end if;
   end if; 

   i := 2;
   while A[i, 1] eq 0 do
      i := i+1;
      if i eq d+1 then break; end if;
   end while;
   
   /* if A[1, 1] is the only non-zero entry on the first column */
   if i eq d+1 then
      // A := A*s*x*s^-1; // sticks values in the first column
      SwapColumns(~A, 1, 2);
      MultiplyColumn(~A, a, 2);
      MultiplyColumn(~A, a^-q, 1);
      AddColumn(~A, 1, 1, 3);
      AddColumn(~A, -1, 4, 2);
      SwapColumns(~A, 1, 2);
      MultiplyColumn(~A, -a, 2);
      MultiplyColumn(~A, -a^-q, 1);
      S2 := S2*SLP.2*SLP.6*SLP.2^-1;
      i := 3;
      while A[i, 1] eq 0 do
         i := i+1;
      end while;
   end if;
   
   /* A[3, 1] eq 0 */
   
   bool := false;
   bool2 := false;
   i := 3;
   j := 0;
   if A[3, 1] eq 0 then
      if A[4, 1] ne 0 then
         // A := (s^u)*A;
	 SwapRows(~A, 3, 4);
	 MultiplyRow(~A, a, 3);
	 MultiplyRow(~A, a^-q, 4);
	 S1 := (SLP.2^SLP.4)*S1;
	 bool := true;
      else
         i := 5;
         while A[i, 1] eq 0 do
            i := i+1;
            if i eq d+1 then break; end if;      
	 end while;
      end if;
      if i eq d+1 then
         /* if we are here, the only non-zero entries in the first column are in the first two rows */
	 i := 4;
	 // A := x*A;
	 AddRow(~A, 1, 3, 1);
	 AddRow(~A, -1, 2, 4);
	 S1 := SLP.6*S1;
	 bool2 := true;
      elif A[3, 1] ne 0 then
         S1 := S1; // i.e. do nothing
      else
         if IsEven(i) then j := i div 2;
         else j := Z!(i/2 + 1/2); end if;
	 // A := ((v*u^-1)^(j-2))*A;
	 B := ZeroMatrix(F, d, d);
	 B[1] := A[1];
	 B[2] := A[2];
	 for y in [3..d-(2*(j-2))] do
	    B[y] := A[y + 2*(j-2)];
	 end for;
	 for y in [d-(2*(j-2))+1..d] do
	    B[y] := A[y - (d-(2*(j-2))+1) + 3];
	 end for;
	 A := B;
	 S1 := ((SLP.5*SLP.4^-1)^(j-2))*S1;
      end if;
      if (A[3, 1] eq 0) and (A[4, 1] ne 0) then
         // A := (s^u)*A;
         SwapRows(~A, 3, 4);
         MultiplyRow(~A, a, 3);
         MultiplyRow(~A, a^-q, 4);
         S1 := (SLP.2^SLP.4)*S1;
         bool := true;
      end if;
   end if;
   
   BB := (1-A[1, 1])/A[3, 1];
   TT := GetBBTransvection(BB);
   // A := T^-1*A;
   AddRow(~A, BB, 3, 1);
   AddRow(~A, -BB^q, 2, 4);
   S1 := TT^-1*S1;

if j ne 0 then
   // A := ((v*u^-1)^-(j-2))*A;
   S1 := ((SLP.5*SLP.4^-1)^-(j-2))*S1;
   B := ZeroMatrix(F, d, d);
   B[1] := A[1];
   B[2] := A[2];
   for y in [3..(2*j-2)] do
      B[y] := A[y + d-2*j + 5 - 3];
   end for;
   for y in [3..d-2*(j-2)] do
      B[y + 2*(j-2)] := A[y];
   end for;
   A := B;
end if;

if bool eq true then

   // A := ((s^-1)^u)*A;
   SwapRows(~A, 3, 4);
   MultiplyRow(~A, -a, 3);
   MultiplyRow(~A, -a^-q, 4);
   S1 := ((SLP.2^-1)^SLP.4)*S1;
   
end if;

if bool2 eq true then
   // A := x^-1*A;
   AddRow(~A, -1, 3, 1);
   AddRow(~A, 1, 2, 4);
   S1 := SLP.6^-1*S1;
end if;
   
end procedure;

/* kills the A[1, 3] entry */

KillPlace := procedure(~A, ~S1, ~S2);

pytemp := FF!A[1, 3];

for r in [1..e] do
   S2 := S2*((SLP.6^(SLP.7^-(r-1)))^-Z!Eltseq(pytemp)[r]);
   // A := A*((x^(y^-(r-1)))^-Z!Eltseq(pytemp)[r]);
   AddColumn(~A, -Eltseq(pytemp)[r]*w^(2*r-2), 1, 3);
   AddColumn(~A, Eltseq(pytemp)[r]*(w^q)^(2*r-2), 4, 2);
end for;

end procedure;

KillRow := procedure(~A, ~S1, ~S2);

pytemp := FF!A[1, 1];

for r in [1..e] do
   S1 := ((SLP.6^(SLP.7^-(r-1)))^-Z!Eltseq(pytemp)[r])*S1;
   // A := ((x^(y^-(r-1)))^-Z!Eltseq(pytemp)[r])*A;
   AddRow(~A, -Eltseq(pytemp)[r]*w^(2*r-2), 3, 1);
   AddRow(~A, Eltseq(pytemp)[r]*(w^q)^(2*r-2), 2, 4);
end for;

end procedure;

for k in [1..block-1] do

GetAOne(~A, ~S1, ~S2);

for l in [1..block-1] do

KillPlace(~A, ~S1, ~S2);

// A := A*u*s*u; // swaps the third and fourth columns so that we can work on the f part of the block.
MultiplyColumn(~A, a, 3);
MultiplyColumn(~A, a^-q, 4);
SwapColumns(~A, 3, 4);
S2 := S2*SLP.4*SLP.2*SLP.4;

KillPlace(~A, ~S1, ~S2);

// A := A*((u*s*u)^-1); // swaps the third and fourth columns back again
SwapColumns(~A, 3, 4);
MultiplyColumn(~A, a^-1, 3);
MultiplyColumn(~A, a^q, 4);
S2 := S2*((SLP.4*SLP.2*SLP.4)^-1);

// A := A*(v*u); // vu is the (2..d/2) cycle on the blocks

for i in [2..(d div 2 - 1)] do

   SwapColumns(~A, 2*i - 1, d-1);
   SwapColumns(~A, 2*i, d);

end for;

S2 := S2*(SLP.5*SLP.4);

end for;

/* we now wish to times A by powers of t^(y^-z) for different z to kill the [1, 2] place */

FFF := sub<F|a>;
py2 := FFF!A[1, 2];
/* It can be shown that conjugating t by y^-1 cubes the power of w in the [1, 2] place of t */
/* t^(y^-z) raises the power of w in the [1, 2] place of t by 2z + 1 */
/* even powers of a in the [1, 2] place can't be done as such elements are not in the group. */

for z in [1..(#(Eltseq(py2)) div 2)] do
   // A := A*((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z]);
   AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
   S2 := S2*((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z]);
end for;

/* now we do the second column */

for l in [1..block-1] do

// A := u*A; // swaps row 1 and 3 and 2 and 4
SwapRows(~A, 1, 3);
SwapRows(~A, 2, 4);
S1 := SLP.4*S1;
KillRow(~A, ~S1, ~S2); // kills the A[1, 1] place
// A := s*A; // swaps row 2 and 1
SwapRows(~A, 1, 2);
MultiplyRow(~A, a, 1);
MultiplyRow(~A, a^-q, 2);
S1 := SLP.2*S1;
KillRow(~A, ~S1, ~S2); // kills the A[1, 1] place
// A := s^-1*A; // swaps 1 and 2 back again
MultiplyRow(~A, a^-1, 1);
MultiplyRow(~A, a^q, 2);
SwapRows(~A, 1, 2);
S1 := SLP.2^-1 * S1;
// A := u*A; // returns the rows to their original position
SwapRows(~A, 1, 3);
SwapRows(~A, 2, 4);
S1 := SLP.4*S1;
// A := v*u*A; // rotates the 2 to d/2 blocks as rows
for m in [2..((d div 2) -1)] do
  SwapRows(~A, 2*m-1, 2*m+1);
  SwapRows(~A, 2*m, 2*m+2);
end for;
// B := ZeroMatrix(F, d, d);
// B[1] := A[1];
// B[2] := A[2];
// B[3] := A[d-1];
// B[4] := A[d];
// for i in [5..d] do
//    B[i] := A[i-2];
// end for;
// A := B;
S1 := SLP.5*SLP.4*S1;

end for;

// A := s^-1 * A * s;
SwapColumns(~A, 1, 2);
MultiplyColumn(~A, a^-q, 1);
MultiplyColumn(~A, a, 2);
SwapRows(~A, 1, 2);
MultiplyRow(~A, a^q, 1);
MultiplyRow(~A, a^-1, 2);

S1 := SLP.2^-1 * S1;
S2 := S2*SLP.2;

FFF := sub<F|a>;
py2 := FFF!A[1, 2];
/* It can be shown that conjugating t by y^-1 cubes the power of w in the [1, 2] place of t */
/* t^(y^-z) raises the power of w in the [1, 2] place of t by 2z + 1 */

for z in [1..(#(Eltseq(py2)) div 2)] do
   // A := ((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z])*A;
   AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
   S1 := ((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z])*S1;
end for;

// A := s*A*s^-1;
SwapColumns(~A, 1, 2);
MultiplyColumn(~A, a^-1, 1);
MultiplyColumn(~A, a^q, 2);
SwapRows(~A, 1, 2);
MultiplyRow(~A, a, 1);
MultiplyRow(~A, a^-q, 2);

S1 := SLP.2 *S1;
S2 := S2* SLP.2^-1;


// A := A^(v^-1);
B := Transpose(A);
C := ZeroMatrix(F, d, d);
for i in [1..d-2] do
   C[i] := B[i + 2];
end for;
C[d-1] := B[1];
C[d] := B[2];
A := Transpose(C);

C := ZeroMatrix(F, d, d);
B := A;
for i in [1..d-2] do
   C[i] := B[i + 2];
end for;
C[d-1] := B[1];
C[d] := B[2];
A := C;

S2 := S2*(SLP.5^-1);
S1 := (SLP.5)*S1;

end for;

if A[1, 1] eq 0 then
   // A := A*s;
   SwapColumns(~A, 1, 2);
   MultiplyColumn(~A, a, 2);
   MultiplyColumn(~A, a^-q, 1);
   S2 := S2*SLP.2;
end if;

z := Log(A[1, 1]) div (q+1);
// A := delta^-z * A;
MultiplyRow(~A, (w^(q+1))^-z, 1);
MultiplyRow(~A, (w^-(q+1))^-z, 2);
S1 := SLP.1^-z *S1;

FFF := sub<F|a>;
py2 := FFF!A[1, 2];
/* It can be shown that conjugating t by y^-1 cubes the power of w in the [1, 2] place of t */
/* t^(y^-z) raises the power of w in the [1, 2] place of t by 2z + 1 */
/* even powers of a in the [1, 2] place can't be done as such elements are not in the group. */

for z in [1..(#(Eltseq(py2)) div 2)] do
   // A := A*((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z]);
   AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
   S2 := S2*((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z]);
end for;

// A := s^-1 * A * s;
SwapColumns(~A, 1, 2);
MultiplyColumn(~A, a^-q, 1);
MultiplyColumn(~A, a, 2);
SwapRows(~A, 1, 2);
MultiplyRow(~A, a^q, 1);
MultiplyRow(~A, a^-1, 2);

S1 := SLP.2^-1 * S1;
S2 := S2*SLP.2;

FFF := sub<F|a>;
py2 := FFF!A[1, 2];
/* It can be shown that conjugating t by y^-1 cubes the power of w in the [1, 2] place of t */
/* t^(y^-z) raises the power of w in the [1, 2] place of t by 2z + 1 */

for z in [1..(#(Eltseq(py2)) div 2)] do
   // A := ((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z])*A;
   AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
   S1 := ((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z])*S1;
end for;

// A := s*A*s^-1;
SwapColumns(~A, 1, 2);
MultiplyColumn(~A, a^-1, 1);
MultiplyColumn(~A, a^q, 2);
SwapRows(~A, 1, 2);
MultiplyRow(~A, a, 1);
MultiplyRow(~A, a^-q, 2);

S1 := SLP.2 *S1;
S2 := S2* SLP.2^-1;

return A, (S1^-1)*(S2^-1);

end function;



