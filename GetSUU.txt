
SUAdditionalElements := function (F: EvenCase := true)
   if EvenCase then d := 4; else d := 3; end if;
   M := MatrixAlgebra (F, d);
   gamma := PrimitiveElement (F);
   q := Isqrt (#F);
   I := Identity (M);
   if EvenCase then  
      I[1][3] := 1;
      I[4][2] := -1;
      J := DiagonalMatrix (F, [gamma, gamma^-q, gamma^-1, gamma^q]);
   else
      I := M![1, -1/2, 1, 0, 1, 0, 0, -1, 1];
      J := DiagonalMatrix (F, [gamma, gamma^(-q), gamma^(q - 1)]);
   end if;
   I := GL(d, F)!I;
   J := GL(d, F)!J;
   return I, J;

end function;

/* canonical basis for SU(d, q) */

SUChosenElements := function (G )

   d := Degree (G);
   E := BaseRing (G); 

   f := Degree (E) div 2;
   p := Characteristic (E);
   q := p^f;
   F := GF(p, f);

   w := PrimitiveElement (E);
   if IsOdd(q) then
      alpha := w^((q + 1) div 2);
   else
      alpha := Root(w^(q+1), 2);
   end if;
   w0 := alpha^2; 

   M := MatrixAlgebra (E, d);
   a := Zero (M);
   a[1][2] := alpha;
   a[2][1] := alpha^-q;
   for i in [3..d] do a[i][i] := 1; end for;
 
   t := Identity (M);
   t[1][2] := alpha;

   delta := Identity (M);
   delta[1][1] := w0;
   delta[2][2] := w0^-1;

   if d ge 4 then 
      p := Zero (M);
      p[1][3] := 1; p[2][4] := 1; p[3][1] := 1; p[4][2] := 1;
      for i in [5..d] do p[i][i] := 1; end for;
   else
      p := Identity (M);
   end if;

   if d ge 4 then 
      b := Zero (M);
      n := d div 2;
      for i in [1..2 * n - 2 by 2] do
         b[i][i + 2] := 1;
      end for; 
      b[2 * n - 1][1] := 1;
       for i in [2..2 * n - 2 by 2] do
          b[i][i + 2] := 1;
     end for; 
      b[2 * n][2] := 1;
      if IsOdd (d) then b[d][d] := 1; end if;
   else 
      b := Identity (M);
   end if;

   P := GL(d, E);
   a := P!a; b := P!b; p := P!p; t := P!t; delta := P!delta;

   if d eq 2 then 
      x := Identity (P);
      y := Identity (P);
   elif d in [3, 4] then 
      x, y := SUAdditionalElements (E: EvenCase := IsEven (d));
   else 
      x, y := SUAdditionalElements (E: EvenCase := IsEven (d));
      f := d - Nrows (x);
      x := GL(d, E) ! (DiagonalJoin (Identity (MatrixAlgebra (E, f)), x)); 
      y := GL(d, E) ! (DiagonalJoin (Identity (MatrixAlgebra (E, f)), y)); 
   end if;

   return [a, b, t, delta, p, x, y];
end function;

ChangeOfBasisMatrix := function(G);

   F := BaseRing (G);
   d := Dimension(G);
   M := KMatrixSpace(F, d, d); 
   b := Basis(M);
   Z := IntegerRing();
   G := SL(d, F);

   CB := ZeroMatrix(F, d, d);
   for i in [1..(d div 2)] do
      CB := CB + b[(i-1)*d + 2*i - 1];
   end for;
   for i in [1..(d div 2)] do
      CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
   end for;
   return G!CB;

end function;

   /* BB is an element of GF(q). This algorithm returns the
      transvection with BB in the [2, 1] position
   */

CreateUnitaryGenerators := function(G);

   F := BaseRing (G);
   w := PrimitiveElement(F);
   d := Dimension(G);
   M := KMatrixSpace(F, d, d); 
   b := Basis(M);
   e := Degree(F);
   p := Characteristic(F);
   q := p^(e div 2);
   Z := IntegerRing();
   G := SL(d, F);
   a := w^((q+1) div 2);
   if IsEven(q) then
      a := Root(w^(q+1), 2);
   end if;

   CB := ZeroMatrix(F, d, d);
   for i in [1..(d div 2)] do
      CB := CB + b[(i-1)*d + 2*i - 1];
   end for;
   for i in [1..(d div 2)] do
      CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
   end for;
   CB := G!CB;
   
   if d ne 2 then
      u := M!Id(G) - b[1] - b[d+2]- b[(d-1)*d-1] - b[d*d] + b[2]
         + b[d+1] + b[(d-1)*d] + b[d*d-1];
      u := G!u;
   else
      u := Id(G);
   end if;

   v := ZeroMatrix(F, d, d);
   for i in [1..(d div 2 - 1)] do
      v := v + b[(2*i-2)*d + 2*i + 1];
   end for;
   v := v + b[d*d - 2*d + 1];
   for i in [1..(d div 2 -1)] do
      v := v + b[(2*i -1)*d + 2*i + 2];
   end for;
   v := v + b[d*d - d + 2];
   v := G!v;

   if d ne 2 then
      x := M!Id(G) + b[3] - b[3*d+2];
      x := G!x;
   else
      x := Id(G);
   end if;

   t := M!Id(G) + b[d]*a;
   t := G!t;

   delta := M!Id(G) - b[1] - b[d*d] + w^(q+1)*b[1]
      + (w^-(q+1))*(b[d*d]);
   delta := G!delta;

   delta := delta^CB;
   t := t^CB;
   u := u^CB;

   s := M!Id(G) - b[1] + a*b[2] - b[d+2] + (a^-q)*b[d+1]; 
   s := G!s; 

   if d ne 2 then   
      y := M!Id(G) - b[1] - b[d+2] - b[2*d+3] - b[3*d+4] + b[1]*w
         + b[d+2]*w^-q + b[2*d+3]*w^-1 + b[3*d+4]*w^q;
      y := G!y;
   else
      y := Id(G);
   end if;

   return [delta, s, t, u, v, x, y], SL(d, F)!CB;

end function;

ConjugateMatrix := function(A);

   F := BaseRing(A);
   d := Degree(A[1]);
   M := KMatrixSpace(F, d, d);
   Z := M.1 - M.1;
   p := Characteristic(F);
   e := Degree(F);
 
   for i in [1..d] do
      for j in [1..d] do
         Z[i, j] := A[i, j]^(p^(e div 2));
      end for;
   end for;

   return Z;

end function;

UnitaryWordInGen := function(G, A);

   W := SLPGroup(7);
   d := Dimension(G);
   F := BaseRing(G);
   w := PrimitiveElement(F);
   if w ne F.1 then
      F := sub<F|w>;
      w := F!w;
   end if;
   G := SL(d, F);
   e := Degree(F);

   Z := IntegerRing();
   p := Characteristic(F);
   q := p^(e div 2);
   M := KMatrixSpace(GF(q), d, d);
   V := VectorSpace(GF(q), d);
   b := Basis(M);

   CB := ZeroMatrix(F, d, d);
   for i in [1..(d div 2)] do
      CB := CB + b[(i-1)*d + 2*i - 1];
   end for;
   for i in [1..(d div 2)] do
      CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
   end for;
   CB := G!CB;

   A := G!A;
   A := G!(A^CB);
   AA := A;

   SLP := SLPGroup(7);
   S1 := Id(SLP);
   S2 := Id(SLP);
   a := w^((q+1) div 2);
   if IsEven(q) then
      a := Root(w^(q+1), 2);
   end if;
   phi := hom<SLP -> W|W.4, W.1, W.3, W.5, W.2, W.6^(W.2^2),
      W.7^(W.2^2)>;

   /* dy := delta*y^-1; */
   dys := SLP.1 * (SLP.7^-1);

   FF := sub<F|w^2>;
   /* assert FF.1 eq (F.1)^2; */
   py := FF!F.1;

   /*py is now a polynomial in w^2 that is equal to w
     the next piece of code creates the element that looks like x but
     with an omega in the [1, 3] slot
   */

   // OX := Id(G);
   OOX := Id(SLP);
   for i in [1..e] do
      // OX := OX*(x^(y^-(i-1)))^Z!Eltseq(py)[i];
      OOX := OOX*(SLP.6^(SLP.7^-(i-1)))^Z!Eltseq(py)[i];
   end for;

   block := d div 2; /* the number of blocks */

   GetBBTransvection := function(BB);

      // T := x^-1;
      TT := SLP.6^-1;
      /* T := T^Z!Eltseq(BB)[1]; */
      TT := TT^Z!Eltseq(BB)[1];

      for r in [2..e] do
         if IsEven(r) then
            // o := OX^-1;
            oo := OOX^-1;
            /* o := o^(y^-Z!((r-2)/2)); */
            oo := oo^(SLP.7^-Z!((r-2)/2));
            /* o := o^Z!Eltseq(BB)[r]; */
            oo := oo^Z!Eltseq(BB)[r];
	    /* T := T*o; */
            TT := TT*oo;
         else
            // o := x^-1;
            oo := SLP.6^-1;
            /* o := o^(y^-Z!((r-1)/2)); */
            oo := oo^(SLP.7^-Z!((r-1)/2));
            /* o := o^Z!Eltseq(BB)[r]; */
            oo := oo^Z!Eltseq(BB)[r];
            /* T := T*o; */
            TT := TT*oo;
         end if;
      end for;

      return TT;

   end function;

   GetAOne := procedure(~A, ~S1, ~S2);

      /* if A[1, 1] eq 0 */

      if A[1, 1] eq 0 then 
         i := Depth(A[1]);
         if IsEven(i) then j := i div 2;
         /* find which block we need */
         else j := Z!(i/2 + 1/2); end if;
         if i eq 2 then
            // A := A*s;
	      SwapColumns(~A, 1, 2);
	      MultiplyColumn(~A, a, 2);
	      MultiplyColumn(~A, a^-q, 1);
	      S2 := S2*SLP.2;
         else
            /* A := A*(u*v^-1)^(j-2)*(u*v)^(j-2)*u; */
            /* swap blocks 1 and j */
            SwapColumns(~A, 1, 2*j - 1);
            SwapColumns(~A, 2, 2*j);
            S2 := S2*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4; 
         end if;
         if A[1, 1] eq 0 then
            // A := A*s;
            SwapColumns(~A, 1, 2);
            MultiplyColumn(~A, a, 2);
            MultiplyColumn(~A, a^-q, 1);
            S2 := S2*SLP.2;
         end if;
      end if; 

      i := 2;
      while A[i, 1] eq 0 do
         i := i+1;
         if i eq d+1 then break; end if;
      end while;
   
      /* if A[1, 1] is the only non-zero entry on the first column */
      if i eq d+1 then
         /* A := A*s*x*s^-1;
            sticks values in the first column
         */
         SwapColumns(~A, 1, 2);
         MultiplyColumn(~A, a, 2);
         MultiplyColumn(~A, a^-q, 1);
         AddColumn(~A, 1, 1, 3);
         AddColumn(~A, -1, 4, 2);
         SwapColumns(~A, 1, 2);
         MultiplyColumn(~A, -a, 2);
         MultiplyColumn(~A, -a^-q, 1);
         S2 := S2*SLP.2*SLP.6*SLP.2^-1;
         i := 3;
         while A[i, 1] eq 0 do
            i := i+1;
         end while;
      end if;
   
      /* A[3, 1] eq 0 */
   
      bool := false;
      bool2 := false;
      i := 3;
      j := 0;
      if A[3, 1] eq 0 then
         if A[4, 1] ne 0 then
            // A := (s^u)*A;
	      SwapRows(~A, 3, 4);
	      MultiplyRow(~A, a, 3);
	      MultiplyRow(~A, a^-q, 4);
	      S1 := (SLP.2^SLP.4)*S1;
	      bool := true;
         else
            while A[i, 1] eq 0 do
               i := i+1;
               if i eq d+1 then break; end if;      
	      end while;
         end if;
         if i eq d+1 then
            /* if we are here, the only non-zero entries in the first
               column are in the first two rows
            */
	      i := 4;
            // A := x*A;
	      AddRow(~A, 1, 3, 1);
	      AddRow(~A, -1, 2, 4);
	      S1 := SLP.6*S1;
	      bool2 := true;
         elif A[3, 1] ne 0 then
            S1 := S1; // i.e. do nothing
         else
            if IsEven(i) then j := i div 2;
            else j := Z!(i/2 + 1/2); end if;
	      /* A := ((v*u^-1)^(j-2))*A; */
	      B := ZeroMatrix(F, d, d);
            B[1] := A[1];
	      B[2] := A[2];
	      for y in [3..d-(2*(j-2))] do
	         B[y] := A[y + 2*(j-2)];
	      end for;
	      for y in [d-(2*(j-2))+1..d] do
	         B[y] := A[y - (d-(2*(j-2))+1) + 3];
	      end for;
	      A := B;
	      S1 := ((SLP.5*SLP.4^-1)^(j-2))*S1;
         end if;
         if (A[3, 1] eq 0) and (A[4, 1] ne 0) then
            // A := (s^u)*A;
            SwapRows(~A, 3, 4);
            MultiplyRow(~A, a, 3);
            MultiplyRow(~A, a^-q, 4);
            S1 := (SLP.2^SLP.4)*S1;
            bool := true;
         end if;
      end if;
   
      BB := (1-A[1, 1])/A[3, 1];
      TT := GetBBTransvection(BB);
      // A := T^-1*A;
      AddRow(~A, BB, 3, 1);
      AddRow(~A, -BB^q, 2, 4);
      S1 := TT^-1*S1;

      if j ne 0 then
         /* A := ((v*u^-1)^-(j-2))*A; */
         S1 := ((SLP.5*SLP.4^-1)^-(j-2))*S1;
         B := ZeroMatrix(F, d, d);
         B[1] := A[1];
         B[2] := A[2];
         for y in [3..(2*j-2)] do
            B[y] := A[y + d-2*j + 5 - 3];
         end for;
         for y in [3..d-2*(j-2)] do
            B[y + 2*(j-2)] := A[y];
         end for;
         A := B;
      end if;

      if bool eq true then
         // A := ((s^-1)^u)*A;
         SwapRows(~A, 3, 4);
         MultiplyRow(~A, -a, 3);
         MultiplyRow(~A, -a^-q, 4);
         S1 := ((SLP.2^-1)^SLP.4)*S1;
      end if;
/*
      if bool2 eq true then
         // A := x^-1*A;
         AddRow(~A, -1, 3, 1);
         AddRow(~A, 1, 2, 4);
         S1 := SLP.6^-1*S1;
      end if;
*/   
   end procedure;

   /* kills the A[1, 3] entry */
   KillPlace := procedure(~A, ~S1, ~S2);
      pytemp := FF!A[1, 3];

      for r in [1..e] do
         S2 := S2*((SLP.6^(SLP.7^-(r-1)))^-Z!Eltseq(pytemp)[r]);
         /* A := A*((x^(y^-(r-1)))^-Z!Eltseq(pytemp)[r]); */
         AddColumn(~A, -Eltseq(pytemp)[r]*w^(2*r-2), 1, 3);
         AddColumn(~A, Eltseq(pytemp)[r]*(w^q)^(2*r-2), 4, 2);
      end for;
   end procedure;

   KillRow := procedure(~A, ~S1, ~S2);
      pytemp := FF!A[1, 1];

      for r in [1..e] do
         S1 := ((SLP.6^(SLP.7^-(r-1)))^-Z!Eltseq(pytemp)[r])*S1;
         /* A := ((x^(y^-(r-1)))^-Z!Eltseq(pytemp)[r])*A; */
         AddRow(~A, -Eltseq(pytemp)[r]*w^(2*r-2), 3, 1);
         AddRow(~A, Eltseq(pytemp)[r]*(w^q)^(2*r-2), 2, 4);
      end for;
   end procedure;

   /* returns ts, which evaluates to t transpose */
   GetTS := function();

      if d ne 2 then
         if IsOdd(q) then
            n := (q + 1) div 2;
            ts := (SLP.3^SLP.2)^(SLP.7^n);
         else
            ts := (SLP.3^SLP.2)^(SLP.1^(q div 2));
         end if;
      else
         FF := sub<F|a^4>;
         beta := FF!(a^(q+1));
         vv := Eltseq(beta);
         ts := Id(SLP);
         // tts := Id(G);
         for i in [1..#vv] do
            ts := ts * (SLP.3^(SLP.1^-(i-1)))^Z!vv[i];
            // tts := tts * (Q[3]^(Q[1]^-(i-1)))^Z!vv[i];
         end for;
         ts := ts^SLP.2;
      end if;

      return ts;

   end function;

   /* returns the SLP that evaluates to the transvection
      [1, gamma, 0, 1]
   */
   GetGammaTransvection := function(gamma);

      FF := sub<F|a^4>;
      beta := FF!(gamma * a^-1);
      vv := Eltseq(beta);
      T := Id(SLP);
      for i in [1..#vv] do
         T := T * (SLP.3^(SLP.1^-(i-1)))^Z!vv[i];
      end for;

      return T;

   end function;

   /* returns the SLP that evaluates to the transvection
      [1, 0, gamma, 1]
   */
   GetGammaTransvectionTranspose := function(gamma);

      FF := sub<F|a^4>;
      beta := FF!(gamma * a^-1);
      vv := Eltseq(beta);
      T := Id(SLP);
      ts := GetTS();
      for i in [1..#vv] do
         T := T * (ts^(SLP.1^(i-1)))^Z!vv[i];
      end for;

      return T;

   end function;

   for k in [1..block-1] do

      GetAOne(~A, ~S1, ~S2);

      for l in [1..block-1] do

         KillPlace(~A, ~S1, ~S2);

         /* A := A*u*s*u;
            swaps the third and fourth columns so that we can work on
            the f part of the block.
         */
         MultiplyColumn(~A, a, 3);
         MultiplyColumn(~A, a^-q, 4);
         SwapColumns(~A, 3, 4);
         S2 := S2*SLP.4*SLP.2*SLP.4;

         KillPlace(~A, ~S1, ~S2);

         /* A := A*((u*s*u)^-1);
            swaps the third and fourth columns back again
         */
         SwapColumns(~A, 3, 4);
         MultiplyColumn(~A, a^-1, 3);
         MultiplyColumn(~A, a^q, 4);
         S2 := S2*((SLP.4*SLP.2*SLP.4)^-1);

         /* A := A*(v*u);
            vu is the (2..d/2) cycle on the blocks
         */
         for i in [2..(d div 2 - 1)] do
            SwapColumns(~A, 2*i - 1, d-1);
            SwapColumns(~A, 2*i, d);
         end for;

         S2 := S2*(SLP.5*SLP.4);

      end for;

      /* we now wish to times A by powers of t^(y^-z) for different z 
         to kill the [1, 2] place
      */

      FFF := sub<F|a>;
      py2 := FFF!A[1, 2];
      /* It can be shown that conjugating t by y^-1 cubes the power of
         w in the [1, 2] place of t. t^(y^-z) raises the power of w in
         the [1, 2] place of t by 2z + 1. Even powers of a in the
         [1, 2] place can't be done as such elements are not in the
         group.
      */

      for z in [1..(#(Eltseq(py2)) div 2)] do
         /* A := A*((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z]); */
         AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
         S2 := S2*((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z]);
      end for;

      if (Characteristic(F) eq 2) then
         for z in [1..(#(Eltseq(py2)) div 2)] do
            /* A := A* (((t^(dy^(q div 2)))^y^-(z-1))
               ^-Z!Eltseq(py2)[2*z -1]);
            */
            AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
            S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
               ^-Z!Eltseq(py2)[2*z -1]);
         end for;
      end if;
      if (Characteristic(F) eq 2) and (IsOdd(#(Eltseq(py2)))) then
         z := (#(Eltseq(py2)) div 2) + 1;
         /* A := A* ((t^(dy^(q div 2)))^y^-z)
            ^-Z!Eltseq(py2)[2*z -1]);
         */
         AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
         S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
            ^-Z!Eltseq(py2)[2*z -1]);
      end if;

      /* now we do the second column */

      for l in [1..block-1] do

         /* A := u*A;
            swaps row 1 and 3 and 2 and 4
         */
         SwapRows(~A, 1, 3);
         SwapRows(~A, 2, 4);
         S1 := SLP.4*S1;
         KillRow(~A, ~S1, ~S2); // kills the A[1, 1] place
         /* A := s*A;
            swaps row 2 and 1
         */
         SwapRows(~A, 1, 2);
         MultiplyRow(~A, a, 1);
         MultiplyRow(~A, a^-q, 2);
         S1 := SLP.2*S1;
         KillRow(~A, ~S1, ~S2); // kills the A[1, 1] place
         // A := s^-1*A; // swaps 1 and 2 back again
         MultiplyRow(~A, a^-1, 1);
         MultiplyRow(~A, a^q, 2);
         SwapRows(~A, 1, 2);
         S1 := SLP.2^-1 * S1;
         /* A := u*A;
            returns the rows to their original position
         */
         SwapRows(~A, 1, 3);
         SwapRows(~A, 2, 4);
         S1 := SLP.4*S1;
         /* A := v*u*A;
            rotates the 2 to d/2 blocks as rows
         */
         for m in [2..((d div 2) -1)] do
            SwapRows(~A, 2*m-1, 2*m+1);
            SwapRows(~A, 2*m, 2*m+2);
         end for;

         S1 := SLP.5*SLP.4*S1;

      end for;

      /* A := s^-1 * A * s; */
      SwapColumns(~A, 1, 2);
      MultiplyColumn(~A, a^-q, 1);
      MultiplyColumn(~A, a, 2);
      SwapRows(~A, 1, 2);
      MultiplyRow(~A, a^q, 1);
      MultiplyRow(~A, a^-1, 2);

      S1 := SLP.2^-1 * S1;
      S2 := S2*SLP.2;

      FFF := sub<F|a>;
      py2 := FFF!A[1, 2];
      /* It can be shown that conjugating t by y^-1 cubes the power of
         w in the [1, 2] place of t. t^(y^-z) raises the power of w in
         the [1, 2] place of t by 2z + 1
      */

      for z in [1..(#(Eltseq(py2)) div 2)] do
         /* A := ((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z])*A; */
         AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
         S1 := ((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z])*S1;
      end for;

      if (Characteristic(F) eq 2) then
         for z in [1..(#(Eltseq(py2)) div 2)] do
            /* A := A* (((t^(dy^(q div 2)))^y^-(z-1))
               ^-Z!Eltseq(py2)[2*z -1]);
            */
            AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
            S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
               ^-Z!Eltseq(py2)[2*z -1]);
         end for;
      end if;
      if (Characteristic(F) eq 2) and (IsOdd(#(Eltseq(py2)))) then
         z := (#(Eltseq(py2)) div 2) + 1;
         /* A := A* ((t^(dy^(q div 2)))^y^-z)
            ^-Z!Eltseq(py2)[2*z -1]);
         */
         AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
         S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
            ^-Z!Eltseq(py2)[2*z -1]);
      end if;

      /* A := s*A*s^-1; */
      SwapColumns(~A, 1, 2);
      MultiplyColumn(~A, a^-1, 1);
      MultiplyColumn(~A, a^q, 2);
      SwapRows(~A, 1, 2);
      MultiplyRow(~A, a, 1);
      MultiplyRow(~A, a^-q, 2);

      S1 := SLP.2 *S1;
      S2 := S2* SLP.2^-1;

      // A := A^(v^-1);
      B := Transpose(A);
      C := ZeroMatrix(F, d, d);
      for i in [1..d-2] do
         C[i] := B[i + 2];
      end for;
      C[d-1] := B[1];
      C[d] := B[2];
      A := Transpose(C);

      C := ZeroMatrix(F, d, d);
      B := A;
      for i in [1..d-2] do
         C[i] := B[i + 2];
      end for;
      C[d-1] := B[1];
      C[d] := B[2];
      A := C;

      S2 := S2*(SLP.5^-1);
      S1 := (SLP.5)*S1;

   end for;

   if A[1, 1] eq 0 then
      // A := A*s;
      SwapColumns(~A, 1, 2);
      MultiplyColumn(~A, a, 2);
      MultiplyColumn(~A, a^-q, 1);
      S2 := S2*SLP.2;
   end if;

   if A[1, 2] eq 0 then
      // A := A*t;
      AddColumn(~A, a, 1, 2);
      S2 := S2*SLP.3;
   end if;

   /* Getting a 1 in the (1, 1) place */
   ts := GetTS();
   FFF := sub<F|a>;
   py2 := FFF!((1-A[1, 1])/A[1, 2]);
   if d ne 2 then
      if IsOdd(q) then
         for z in [1..(#(Eltseq(py2)) div 2)] do
            /* A := A*((tts^(y^(z-1)))^Z!Eltseq(py2)[2*z -1]); */
            AddColumn(~A, Eltseq(py2)[2*z]*a^(2*z-1), 2, 1);
            S2 := S2*((ts^(SLP.7^(z-1)))^Z!Eltseq(py2)[2*z]);
         end for;
      else
         for z in [1..#(Eltseq(py2))] do
            if IsEven(z) then
               index := (z + 1) div 2 - 1;
            else
               index := q div 2 + (z + 1) div 2 - 2;
            end if;
            /* A := A*((tts^(y^index)))^Z!Eltseq(py2)[z]); */
            AddColumn(~A, Eltseq(py2)[z]*a^(z-1), 2, 1);
            S2 := S2*((ts^(SLP.7^index))^Z!Eltseq(py2)[z]);
         end for;
/*         zz := -q^2 * Log(A[1, 1]) div 2; */
         /* A := A*Q[1]^zz; */
/*         MultiplyColumn(~A, a^(2*zz), 1);
         MultiplyColumn(~A, a^-(2*zz), 2);
         S2 := S2*SLP.1^zz;*/
      end if;
   else
      T := GetGammaTransvectionTranspose(py2);
      AddColumn(~A, py2, 2, 1);
      S2 := S2*T;
   end if;

   FFF := sub<F|a>;
   py2 := FFF!A[1, 2];
   if d ne 2 then
      for z in [1..(#(Eltseq(py2)) div 2)] do
         /* A := A*((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z]); */
         AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
         S2 := S2*((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z]);
      end for;
   else
      gamma := A[1, 2];
      tran := GetGammaTransvection(gamma);
      AddColumn(~A, -gamma, 1, 2);
      S2 := S2*tran^-1;
   end if;

   if (Characteristic(F) eq 2) and (A[1, 2] ne 0) then
      for z in [1..(#(Eltseq(py2)) div 2)] do
         /* A := A* (((t^(dy^(q div 2)))^y^-(z-1))
            ^-Z!Eltseq(py2)[2*z -1]);
         */
         AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
         S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
            ^-Z!Eltseq(py2)[2*z -1]);
      end for;
   end if;
   if (Characteristic(F) eq 2) and (IsOdd(#(Eltseq(py2)))) and (A[1, 2] ne 0) then
      z := (#(Eltseq(py2)) div 2) + 1;
      /* A := A* ((t^(dy^(q div 2)))^y^-z)^-Z!Eltseq(py2)[2*z -1]); */
      AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
      S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
         ^-Z!Eltseq(py2)[2*z -1]);
   end if;

   // A := s^-1 * A * s;
   SwapColumns(~A, 1, 2);
   MultiplyColumn(~A, a^-q, 1);
   MultiplyColumn(~A, a, 2);
   SwapRows(~A, 1, 2);
   MultiplyRow(~A, a^q, 1);
   MultiplyRow(~A, a^-1, 2);

   S1 := SLP.2^-1 * S1;
   S2 := S2*SLP.2;

   FFF := sub<F|a>;
   py2 := FFF!A[1, 2];
   if d ne 2 then
      for z in [1..(#(Eltseq(py2)) div 2)] do
         /* A := ((t^(y^-(z-1)))^-Z!Eltseq(py2)[2*z])*A; */
         AddColumn(~A, -Eltseq(py2)[2*z]*a^(2*z-1), 1, 2);
         S1 := ((SLP.3^(SLP.7^-(z-1)))^-Z!Eltseq(py2)[2*z])*S1;
      end for;
   else
      gamma := A[1, 2];
      tran := GetGammaTransvection(gamma);
      AddColumn(~A, -gamma, 1, 2);
      S2 := S2*tran^-1;
   end if;

   if (Characteristic(F) eq 2) and (A[1, 2] ne 0) then
      for z in [1..(#(Eltseq(py2)) div 2)] do
         /* A := A* (((t^(dy^(q div 2)))^y^-(z-1))
            ^-Z!Eltseq(py2)[2*z -1]);
         */
         AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
         S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
            ^-Z!Eltseq(py2)[2*z -1]);
      end for;
   end if;
   if (Characteristic(F) eq 2) and (IsOdd(#(Eltseq(py2)))) and (A[1, 2] ne 0) then
      z := (#(Eltseq(py2)) div 2) + 1;
      /* A := A* ((t^(dy^(q div 2)))^y^-z)^-Z!Eltseq(py2)[2*z -1]); */
      AddColumn(~A, -Eltseq(py2)[2*z -1]*a^(2*z -2), 1, 2);
      S2 := S2* (((SLP.3^(dys^(q div 2)))^SLP.7^-(z-1))
         ^-Z!Eltseq(py2)[2*z -1]);
   end if;

   // A := s*A*s^-1;
   SwapColumns(~A, 1, 2);
   MultiplyColumn(~A, a^-1, 1);
   MultiplyColumn(~A, a^q, 2);
   SwapRows(~A, 1, 2);
   MultiplyRow(~A, a, 1);
   MultiplyRow(~A, a^-q, 2);

   S1 := SLP.2 *S1;
   S2 := S2* SLP.2^-1;

   word := (S1^-1)*(S2^-1);
   word := phi(word);

   return A, word;

end function;


   /* creating H. H is the subgroup of G that fixes the first basis
      element of the natural module. As this has a p-local subgroup, it
      affords a 1-dimensional submodule in the natural dimension.
   */


intrinsic GetSUU(E::GrpMat, Q::SeqEnum, d::RngIntElt, qq::RngIntElt) -> ModTupFld, ModTupFld
{Returns two submodules};

   F := BaseRing(Q[1]);
   q := #F;
   w := PrimitiveElement(F); 
   M := KMatrixSpace(F, d, d);
   b := Basis(M);
   G := SL(d, F);
   n := Degree(Q[1]);
   e := Degree(F);
   QQ := SUChosenElements(SU(d, F));

   if assigned E`Module then
      return E`Module;
   end if;

   CB := ChangeOfBasisMatrix(SU(d, qq));

QG := SUChosenElements(SU(d-2, F));

   HQ := [];
   for i in [1..#QG] do
      Append (~HQ, G!InsertBlock(Id(G), QG[i], 3, 3));
   end for;
   Append(~HQ, QQ[7]);
   Append(~HQ, QQ[6]^(QQ[2]^2));

   /* H is the stabiliser of the first basis vector
      of the natural module
   */
   H := sub<GL(d, qq)|HQ>;

   s := Q[1];
   v := Q[2];
   t := Q[3];
   delta := Q[4];
   u := Q[5];
   x := Q[6];

   HEQ := [s^v, v*u, u^v, t^v, delta^v, x, delta, x^v];
   if d eq 6 then
      HEQ := [s^v, u^v, t^v, delta^v, x, delta, x^v];
   end if;
   if d eq 4 then
      HEQ := [s^v, t^v, delta^v, delta, x^v];
   end if;


   HE := sub<GL(n, q)|HEQ>;
   VPH := GModule(HE);
   U := CompositionSeries(VPH)[1];

   V := VectorSpace(GF(q), n);
   U1 := sub<V|[V!VPH!U.i : i in [1..Dimension(U)]]>;
   /* Here U has been rewritten in vectors of length n but
      the module still has its original dimension
   */
   Remove(~HQ, #HQ);
   Append(~HQ, Transpose(QQ[6]^QQ[2]));
   H := sub<GL(d, qq)|HQ>;

   splodge1:= ((x^(v^2))^(u^s))^(v^-1);
   Remove(~HEQ, #HEQ);
   Append(~HEQ, splodge1);
   HE2 := sub<GL(n, q)| HEQ>;
   VPH2 := GModule(HE2);
   U := CompositionSeries(VPH2)[1];
   U2 := sub<V|[V!VPH2!U.i : i in [1..Dimension(U)]]>;

   E`Module := [U1, U2];
   return E`Module;

end intrinsic;


GetO := function(Q, d, qq)

   q := #BaseRing(Q[1]);
   F := GF(q);
   w := PrimitiveElement(GF(qq));
   t := Q[3];
   delta := Q[4];
   Z := IntegerRing();
   e := Factorization(qq)[1][2];

   FF := sub<F|w^2>;
   py := FF!F.1;
   
   /* py is now a polynomial in w^2 that is equal to w */
   
   O := Id(Parent(Q[1]));
   for i in [1..e] do
      O := O*(t^delta^-(i-1))^Z!Eltseq(py)[i];
   end for;

   return O;

end function;


   /* we now create an elementary abelian p-group K. The generators of
      K consist of those elements with some power of the primitive
      element in the top row (excluding the first position), 1s down
      the leading diagonal and 0s everywhere else
   */

intrinsic GetSUK(E::GrpMat, Q::SeqEnum, d::RngIntElt, qq::RngIntElt) -> SeqEnum, SeqEnum
{Returns the image of the p-groups under the representation};

   q := #BaseRing(Q[1]);
   F := GF(q);
   w := PrimitiveElement(F); 
   M := KMatrixSpace(F, d, d);
   b := Basis(M);
   G := SL(d, qq);
   n := Degree(Q[1]);
   e := Degree(F);
   QQ := SpChosenElements(Sp(d, qq));

   CB := ChangeOfBasisMatrix(Sp(d, qq));

   if assigned E`PG1 then
      return E`PG1, E`PG2, E`PG3;
   end if;

   s := QQ[1];
   v := QQ[2];
   t := QQ[3];
   delta := QQ[4];
   u := QQ[5];
   x := QQ[6]^(QQ[2]^2);

   KQ := [];
   for j in [0..(e-1)] do
      Append(~KQ, x^(delta^j));
   end for;
   for i in [1..(d div 2) - 2] do
      for j in [0..(e-1)] do
         Append(~KQ, (x^(delta^j))^((v*u)^i));
      end for;
   end for;
   for j in [0..(e-1)] do
      Append(~KQ, (x^(delta^j))^(s^u));
   end for;
   for i in [1..(d div 2) - 2] do
      for j in [0..(e-1)] do
         Append(~KQ, (x^(delta^j))^((s^u)*(v*u)^i));
      end for;
   end for;
   Append(~KQ, Transpose(t));
   for j in [1..(e-1)] do
      temp := M!Transpose(t);
      temp[2, 1] := w^j;
      Append(~KQ, temp);
   end for;

   for i in [1..#KQ] do
      KQ[i] := Transpose(KQ[i]);
   end for;

   K := sub<SL(d, qq)|KQ>;

   S := [K.i : i in [1..Ngens(K)]];

   /* mapping K to the non-natural representation */

   s := Q[1];
   v := Q[2];
   t := Q[3];
   delta := Q[4];
   u := Q[5];
   x := (Q[6]^(Q[2]^2))^(Q[5]^Q[1]);

   kk := [];
   for j in [0..(e-1)] do
      Append(~kk, x^(delta^-j));
   end for;
   for i in [1..(d div 2) - 2] do
      for j in [0..(e-1)] do
         Append(~kk, (x^(delta^-j))^((v*u)^i));
      end for;
   end for;
   for j in [0..(e-1)] do
      Append(~kk, (x^(delta^-j))^(s^u));
   end for;
   for i in [1..(d div 2) - 2] do
      for j in [0..(e-1)] do
         Append(~kk, (x^(delta^-j))^((s^u)*(v*u)^i));
      end for;
   end for;

   O := GetO(Q, d, qq);

   for j in [1..e] do
      if IsOdd(j) then
         T := t^(delta^-((j-1) div 2));
         Append(~kk, T);
      else
         T := O^(delta^-((j-1) div 2));
         Append(~kk, T);
      end if;
   end for;

   KE := sub<GL(n, q)|[kk[i] : i in [1..#kk]]>;

   for i in [1..#KQ] do
      KQ[i] := Transpose(KQ[i]);
   end for;

   K := sub<SL(d, qq)|[KQ[i] : i in [1..#KQ]]>;
   S1 := [K.i : i in [1..Ngens(K)]];

   s := Q[1];
   v := Q[2];
   t := (Q[3]^Q[1])^-1;
   delta := Q[4];
   u := Q[5];
   x := Q[6]^(Q[2]^2);

   kk2 := [];
   for j in [0..(e-1)] do
      Append(~kk2, x^(delta^j));
   end for;
   for i in [1..(d div 2) - 2] do
      for j in [0..(e-1)] do
         Append(~kk2, (x^(delta^j))^((v*u)^i));
      end for;
   end for;
   for j in [0..(e-1)] do
      Append(~kk2, (x^(delta^j))^(s^u));
   end for;
   for i in [1..(d div 2) - 2] do
      for j in [0..(e-1)] do
         Append(~kk2, (x^(delta^j))^((s^u)*(v*u)^i));
      end for;
   end for;

   for j in [1..e] do
      if IsOdd(j) then
         T := t^(delta^((j-1) div 2));
         Append(~kk2, T);
      else
         T := ((O^Q[1])^-1)^(delta^((j-1) div 2));
         Append(~kk2, T);
      end if;
   end for;

   KE2 := sub<GL(n, q)|[kk2[i] : i in [1..#kk2]]>;

   E`PG1 := [KE, KE2];
   E`PG2 := kk;
   E`PG3 := [S, S1];
   return E`PG1, E`PG2, E`PG3;

end intrinsic;
