SetVerbose ("User1",0);
// SetVerbose ("User5",1);

StandardOMinus := function (n, q: Special := false)
   F := GF (q);
   E<delta> := GF (q^2);
   mu := delta^((q + 1) div 2);

   MA := MatrixAlgebra (GF(q), n);
      
   A := MatrixAlgebra (GF (q), 2);
   J := A![0,1,1,0];
 
   m := (n - 2) div 2;

   form := Zero (MA);
   for i in [1..m] do
      InsertBlock (~form, J, (i - 1) * 2 + 1, (i - 1) * 2 + 1);
   end for;
   form[n - 1][n - 1] := -2;
   form[n][n] := 2 * mu^2;

   if Special then 
      G := SOMinus (n, q);
   else 
      G := OmegaMinus (n, q);
   end if;
   CB := TransformForm (form, n, q, "orthogonalminus");
   
   return G^(CB^-1), form;
   
   return form;
end function;

/* if SpecialGroup is true, then standard generators
   for SO-, otherwise for Omega- */

MinusChosenElements := function (G: Words := true, SpecialGroup := false)

   n := Degree (G);
   F := BaseRing (G);
   q := #F;

   w := PrimitiveElement (F);

   A := MatrixAlgebra (GF (q), 2);
   if n eq 2 then 
      Gens := [Identity (A):  i in [1..3]];
      // flag := exists (x){ x : x in Generators (G) | IsEven (Order (x))};
      // assert flag;
      x := OmegaMinus(n, q).1;
      Gens := [Identity (A):  i in [1..5]];
      Gens[2] := x;
      if SpecialGroup then 
         Gens[#Gens + 1] := -Identity (GL(2, F)); 
      end if;
   else 
      F := GF (q);
      E := GF (q^2);
      delta := PrimitiveElement(E);
      mu := delta^((q + 1) div 2);

      MA := MatrixAlgebra (GF(q), n);
      
      I := A![1,0,0,1];
 
      M := MatrixAlgebra (GF(q), 4);

      a := A![1,1,0,1];
      b := A![2,0,0,0];
      c := A![0,1,0,0];
      d := A![1,0,0,1];
      U := Zero (MA);
      for i in [1..n - 4] do U[i][i] := 1; end for;
      InsertBlock (~U, a, n - 3, n - 3);
      InsertBlock (~U, b, n - 3, n - 1);
      InsertBlock (~U, c, n - 1, n - 3);
      InsertBlock (~U, d, n - 1, n - 1);
      U := Transpose (U);

      a := A![1,0,1,1];
      b := A![0,0,2,0];
      c := A![1,0,0,0];
      d := A![1,0,0,1];
      L := Zero (MA);
      for i in [1..n - 4] do L[i][i] := 1; end for;
      InsertBlock (~L, a, n - 3, n - 3);
      InsertBlock (~L, b, n - 3, n - 1);
      InsertBlock (~L, c, n - 1, n - 3);
      InsertBlock (~L, d, n - 1, n - 1);
      L := Transpose (L);

      a := A! [delta^(q + 1), 0, 0, delta^(-q - 1)]; 
      d := A![1/2 * (delta^(q - 1) + delta^(-q + 1)),
               1/2 * mu * (delta^(q - 1) - delta^(-q + 1)),
               1/2 * mu^(-1) * (delta^(q - 1) - delta^(-q + 1)),
               1/2 * (delta^(q - 1) + delta^(-q + 1))];
      D := Zero (MA);
      for i in [1..n - 4] do D[i][i] := 1; end for;
      InsertBlock (~D, a, n - 3, n - 3);
      InsertBlock (~D, d, n - 1, n - 1);
      D := Transpose (D);

      Gens := [U, L, D];

      if n gt 4 then
         p := Zero (MA);
         InsertBlock (~p, I, 1, 3);
         InsertBlock (~p, -I, 3, 1);
         for i in [5..n] do p[i][i] := 1; end for;
         Append (~Gens, p);
      else
         p := Id(G);
         Append (~Gens, p);
      end if;

      if n gt 6 then 
         h := Zero (MA);
         m := n - 2;
         for i in [1..m div 2 - 1] do
            x := (i - 1) * 2 + 1;
            y := x + 2;
            InsertBlock (~h, I, x, y);
         end for;
         II := IsEven(n div 2) select I else -I;
         InsertBlock (~h, II, m - 1, 1);
         InsertBlock (~h, I, n - 1, n - 1);
         Append (~Gens, h);
      else
         Append (~Gens, p);
      end if;
   end if;

   if SpecialGroup then
      m := Identity (MA);
      if q mod 4 eq 3 then
         m[1][1] := -1;
         m[2][2] := -1;
      else
         m[n-1][n-1] := -1;
         m[n][n] := -1;
      end if;
      Append (~Gens, m);
   end if;

   return Gens;

end function;






