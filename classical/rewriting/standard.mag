/* canonical basis for SL(d, q) */

SLChosenElements := function (G)

   d := Degree (G);
   F := BaseRing (G); 

   w := PrimitiveElement (F);
   M := MatrixAlgebra (F, d);
   a := Identity (M);
   a[1][1] := 0;
   a[1][2] := 1;
   a[2][1] := -1;
   a[2][2] := 0;

   b := Zero (M);
   for i in [2..d] do
      b[i][i - 1] := -1;
   end for;
   b[1][d] := 1;
   if d eq 3 then b := b^-1; end if;
 
   t := Identity (M);
   t[1][2] := 1;

   delta := Identity (M);
   delta[1][1] := w;
   delta[2][2] := w^-1;

   P := GL(d, F);
   a := P!a; b := P!b; t := P!t; delta := P!delta;

   return [a, b, t, delta];
 
end function;

/* additional element to generate all of Sp */

SpAdditionalElement := function (F)
   M := MatrixAlgebra (F, 4);
   I := Identity (M);

   I[2][3] := 1;
   I[4][1] := 1;

   I := GL (4, F)!I;
   return I;
end function;

/* canonical basis for Sp(d, q) */

SpChosenElements := function (G)

   d := Degree (G);
   F := BaseRing (G); 

   w := PrimitiveElement (F);
   M := MatrixAlgebra (F, d);
   a := Identity (M);
   a[1][1] := 0;
   a[1][2] := 1;
   a[2][1] := -1;
   a[2][2] := 0;

   t := Identity (M);
   t[1][2] := 1;

   delta := Identity (M);
   delta[1][1] := w;
   delta[2][2] := w^-1;

   if d ge 4 then 
      p := Zero (M);
      p[1][3] := 1; p[2][4] := 1; p[3][1] := 1; p[4][2] := 1;
      for i in [5..d] do p[i][i] := 1; end for;
   else
      p := Identity (M);
   end if;

   if d ge 4 then 
      b := Zero (M);
      n := d div 2;
      for i in [1..d - 3 by 2] do
         b[i][i + 2] := 1;
      end for; 
      b[d - 1][1] := 1;
      for i in [2..d - 2 by 2] do
         b[i][i + 2] := 1;
      end for; 
      b[d][2] := 1;
   else 
      b := Identity (M);
   end if;

   P := GL(d, F);
   a := P!a; b := P!b; p := P!p; t := P!t; delta := P!delta;
   if d gt 4 then 
      v := P!(DiagonalJoin (Identity (MatrixAlgebra (F, d - 4)),
                            SpAdditionalElement (F)));
   elif d eq 4 then 
      v := SpAdditionalElement (F);
   else
      v := Identity (P);
   end if;

   return [a, b, t, delta, p, v];
end function;

/* additional elements to generate SU */

SUAdditionalElements := function (F: EvenCase := true)
   if EvenCase then d := 4; else d := 3; end if;
   M := MatrixAlgebra (F, d);
   gamma := PrimitiveElement (F);
   q := Isqrt (#F);
   I := Identity (M);
   if EvenCase then  
      I[1][3] := 1;
      I[4][2] := -1;
      J := DiagonalMatrix (F, [gamma, gamma^-q, gamma^-1, gamma^q]);
   else
      I := M![1, -1/2, 1, 0, 1, 0, 0, -1, 1];
      J := DiagonalMatrix (F, [gamma, gamma^(-q), gamma^(q - 1)]);
   end if;
   I := GL(d, F)!I;
   J := GL(d, F)!J;
   return I, J;

end function;

/* canonical basis for SU(d, q) */

SUChosenElements := function (G)

   d := Degree (G);
   E := BaseRing (G); 

   f := Degree (E) div 2;
   p := Characteristic (E);
   q := p^f;
   F := GF(p, f);

   w := PrimitiveElement (E);
   alpha := w^((q + 1) div 2);
   w0 := alpha^2; 

   M := MatrixAlgebra (E, d);
   a := Zero (M);
   a[1][2] := alpha;
   a[2][1] := alpha^-q;
   for i in [3..d] do a[i][i] := 1; end for;
 
   t := Identity (M);
   t[1][2] := alpha;

   delta := Identity (M);
   delta[1][1] := w0;
   delta[2][2] := w0^-1;

   if d ge 4 then 
      p := Zero (M);
      p[1][3] := 1; p[2][4] := 1; p[3][1] := 1; p[4][2] := 1;
      for i in [5..d] do p[i][i] := 1; end for;
   else
      p := Identity (M);
   end if;

   if d ge 4 then 
      b := Zero (M);
      n := d div 2;
      for i in [1..2 * n - 2 by 2] do
         b[i][i + 2] := 1;
      end for; 
      b[2 * n - 1][1] := 1;
       for i in [2..2 * n - 2 by 2] do
          b[i][i + 2] := 1;
     end for; 
      b[2 * n][2] := 1;
      if IsOdd (d) then b[d][d] := 1; end if;
   else 
      b := Identity (M);
   end if;

   P := GL(d, E);
   a := P!a; b := P!b; p := P!p; t := P!t; delta := P!delta;

   if d eq 2 then 
      x := Identity (P);
      y := Identity (P);
   elif d in [3, 4] then 
      x, y := SUAdditionalElements (E: EvenCase := IsEven (d));
   else 
      x, y := SUAdditionalElements (E: EvenCase := IsEven (d));
      f := d - Nrows (x);
      x := GL(d, E) ! (DiagonalJoin (Identity (MatrixAlgebra (E, f)), x)); 
      y := GL(d, E) ! (DiagonalJoin (Identity (MatrixAlgebra (E, f)), y)); 
   end if;

   return [a, b, t, delta, p, x, y];
end function;

/* if SpecialGroup is true, then standard generators
   for SO+, otherwise for Omega+ */

PlusChosenElements := function (G: SpecialGroup := false)

   n := Degree (G);
   F := BaseRing (G);
   q := #F;

   w := PrimitiveElement (F);
   A := MatrixAlgebra (F, 2);

   if n eq 2 then 
      Gens := [Identity (A): i in [1..8]];
      // flag := exists (x){x : x in Generators (G) | IsEven (Order (x))};
      // assert flag;
      if SpecialGroup then
         if (q ne 3) and (q ne 2) then x := SOPlus(2, F).1; else x := Id(G); end if;
      else
         if (q ne 3) and (q ne 2) then x := OmegaPlus(2, F).1; else x := Id(G); end if;
      end if;
      // if flag then Gens[3] := x; end if;
      Gens[3] := x;
      if SpecialGroup then 
         Gens[#Gens + 1] := -Identity (GL(2, F)); 
      end if;
   else 
      MA := MatrixAlgebra (F, n);
      M := MatrixAlgebra (F, 4);

      s := Zero (MA);
      for i in [5..n] do s[i][i] := 1; end for;
      s[1][4] := -1; s[2][3] := -1; s[3][2] := 1; s[4][1] := 1;

      t4 := M![1,0,0,-1, 0,1,0,0, 0,1,1,0, 0,0,0,1];
      t := Identity (MA);
      InsertBlock (~t, t4, 1, 1);

      delta4 := DiagonalMatrix (F, [w, w^-1, w, w^-1]);
      delta := Identity (MA);
      InsertBlock (~delta, delta4, 1, 1);
      
      s1 := Zero (MA);
      for i in [5..n] do s1[i][i] := 1; end for;
      s1[1][3] := 1; s1[2][4] := 1; s1[3][1] := -1; s1[4][2] := -1;

      t4 := M![1,0,1,0,  0,1,0,0, 0,0,1,0, 0,-1,0,1];
      t1 := Identity (MA);
      InsertBlock (~t1, t4, 1, 1);

      delta4 := DiagonalMatrix (F, [w, w^-1, w^-1, w]);
      delta1 := Identity (MA);
      InsertBlock (~delta1, delta4, 1, 1);
      
      u := Identity (MA);

      I := Identity (A);
      v := Zero (MA);
      for i in [1..n div 2 - 1] do
         x := (i - 1) * 2 + 1;
         y := x + 2;
         InsertBlock (~v, I, x, y);
      end for;
      InsertBlock (~v, (-1)^(n div 2 + 1) * I, n - 1, 1);
      Gens := [s, t, delta, s1, t1, delta1, u, v];
      if SpecialGroup then 
         a :=  Identity (MA);
         _, b := Valuation (q - 1, 2);
         a[1][1] := w^b;
         a[2][2] := w^-b;
         Append (~Gens, a);
      end if;
   end if;

   return Gens;

end function;

/* if SpecialGroup is true, then standard generators
   for SO^0, otherwise for Omega */

SOChosenElements := function (G: SpecialGroup := false)

   n := Degree (G);
   assert IsOdd (n) and n gt 1;

   F := BaseRing (G);
   q := #F;

   w := PrimitiveElement (F);

   MA := MatrixAlgebra (F, n);
      
   A := MatrixAlgebra (F, 2);
 
   M := MatrixAlgebra (F, 3);
   a := M![1,1,2,0,1,0,0,1,1];
   U := Identity (MA);
   InsertBlock (~U, a, n - 2, n - 2);

   b := M![0,1,0,1,0,0,0,0,-1];
   L := Identity (MA);
   InsertBlock (~L, b, n - 2, n - 2);

   delta := M!DiagonalMatrix (F, [w^2, w^-2, 1]);
   D := Identity (MA);
   InsertBlock (~D, delta, n - 2, n - 2);

   Gens := [L, U, D];

   if n gt 4 then 
      I := A![1,0,0, 1];
      h := Zero (MA);
      m := n - 1;
      for i in [1..m div 2 - 1] do
         x := (i - 1) * 2 + 1;
         y := x + 2;
         InsertBlock (~h, I, x, y);
      end for;
      InsertBlock (~h, (-1)^(n div 2 - 1) * I, m - 1, 1);
      h[n][n]:=1;
      Append (~Gens, h);
   else
      Append(~Gens, M!Id(G));
   end if;

   if SpecialGroup then
      m :=  Identity (MA);
      _, b := Valuation (q - 1, 2);
      m[n - 2][n-2] := w^b;
      m[n - 1][n-1] := w^-b;
      Append (~Gens, m);
   end if;

   P := GL (n, q);
   gens := [P!x: x in Gens];

   return gens;

end function;

/* if SpecialGroup is true, then standard generators
   for SO-, otherwise for Omega- */

MinusChosenElements := function (G: Words := true, SpecialGroup := false)

   n := Degree (G);
   F := BaseRing (G);
   q := #F;

   w := PrimitiveElement (F);

   A := MatrixAlgebra (GF (q), 2);
   if n eq 2 then 
      Gens := [Identity (A):  i in [1..3]];
      // flag := exists (x){ x : x in Generators (G) | IsEven (Order (x))};
      // assert flag;
      x := OmegaMinus(n, q).1;
      Gens := [Identity (A):  i in [1..5]];
      Gens[2] := x;
      if SpecialGroup then 
         Gens[#Gens + 1] := -Identity (GL(2, F)); 
      end if;
   else 
      F := GF (q);
      E := GF (q^2);
      delta := PrimitiveElement(E);
      mu := delta^((q + 1) div 2);

      MA := MatrixAlgebra (GF(q), n);
      
      I := A![1,0,0,1];
 
      M := MatrixAlgebra (GF(q), 4);

      a := A![1,1,0,1];
      b := A![2,0,0,0];
      c := A![0,1,0,0];
      d := A![1,0,0,1];
      U := Zero (MA);
      for i in [1..n - 4] do U[i][i] := 1; end for;
      InsertBlock (~U, a, n - 3, n - 3);
      InsertBlock (~U, b, n - 3, n - 1);
      InsertBlock (~U, c, n - 1, n - 3);
      InsertBlock (~U, d, n - 1, n - 1);
      U := Transpose (U);

      a := A![1,0,1,1];
      b := A![0,0,2,0];
      c := A![1,0,0,0];
      d := A![1,0,0,1];
      L := Zero (MA);
      for i in [1..n - 4] do L[i][i] := 1; end for;
      InsertBlock (~L, a, n - 3, n - 3);
      InsertBlock (~L, b, n - 3, n - 1);
      InsertBlock (~L, c, n - 1, n - 3);
      InsertBlock (~L, d, n - 1, n - 1);
      L := Transpose (L);

      a := A! [delta^(q + 1), 0, 0, delta^(-q - 1)]; 
      d := A![1/2 * (delta^(q - 1) + delta^(-q + 1)),
               1/2 * mu * (delta^(q - 1) - delta^(-q + 1)),
               1/2 * mu^(-1) * (delta^(q - 1) - delta^(-q + 1)),
               1/2 * (delta^(q - 1) + delta^(-q + 1))];
      D := Zero (MA);
      for i in [1..n - 4] do D[i][i] := 1; end for;
      InsertBlock (~D, a, n - 3, n - 3);
      InsertBlock (~D, d, n - 1, n - 1);
      D := Transpose (D);

      Gens := [U, L, D];

      if n gt 4 then
         p := Zero (MA);
         InsertBlock (~p, I, 1, 3);
         InsertBlock (~p, -I, 3, 1);
         for i in [5..n] do p[i][i] := 1; end for;
         Append (~Gens, p);
      else
         p := Id(G);
         Append (~Gens, p);
      end if;

      if n gt 6 then 
         h := Zero (MA);
         m := n - 2;
         for i in [1..m div 2 - 1] do
            x := (i - 1) * 2 + 1;
            y := x + 2;
            InsertBlock (~h, I, x, y);
         end for;
         II := IsEven(n div 2) select I else -I;
         InsertBlock (~h, II, m - 1, 1);
         InsertBlock (~h, I, n - 1, n - 1);
         Append (~Gens, h);
      else
         Append (~Gens, p);
      end if;
   end if;

   if SpecialGroup then
      m := Identity (MA);
      if q mod 4 eq 3 then 
         m[1][1] := -1;
         m[2][2] := -1;
      else
         m[n-1][n-1] := -1;
         m[n][n] := -1;
      end if;
      Append (~Gens, m);
   end if;

   return Gens;
end function;
