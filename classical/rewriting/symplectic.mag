ChangeOfBasisMatrix := function(G)

   F := BaseRing (G);
   d := Dimension(G);
   M := KMatrixSpace(F, d, d); 
   b := Basis(M);
   Z := IntegerRing();
   G := SL(d, F);

   CB := ZeroMatrix(F, d, d);
   for i in [1..(d div 2)] do
      CB := CB + b[(i-1)*d + 2*i - 1];
   end for;
   for i in [1..(d div 2)] do
      CB := CB + b[(d div 2)*d + i*d - 2*i + 2];
   end for;
   return G!CB;

end function;

function SymplecticCBM(G)
    return ChangeOfBasisMatrix(G);
end function;

/* BB is an element of GF(q). This algorithm returns the
   transvection with BB in the [2, 1] position
*/

GetBBTransvection := function(BB, SLP)

   F := Parent(BB);
   e := Degree(F);
   Z := IntegerRing();
   w := PrimitiveElement(F);

   FF := sub<F|w^2>;
   // FF.1 eq (F.1)^2; // this will be true
   py := FF!F.1;

   // O := Id(G);
   OO := Id(SLP);
   for i in [1..e] do
      // O := O*(t^delta^-(i-1))^Z!Eltseq(py)[i];
      OO := OO*(SLP.3^SLP.1^-(i-1))^Z!Eltseq(py)[i];
   end for;

   // T := t^-1;
   TT := SLP.3^-1;
   // T := (T^s)^Z!Eltseq(BB)[1];
   TT := (TT^SLP.2)^Z!Eltseq(BB)[1];

   for r in [2..e] do
      if IsEven(r) then
         // o := O^-1;
         oo := OO^-1;
         // o := o^(delta^-Z!((r-2)/2));
         oo := oo^(SLP.1^-Z!((r-2)/2));
         // o := (o^s)^Z!Eltseq(BB)[r];
         oo := (oo^SLP.2)^Z!Eltseq(BB)[r];
         // T := T*o;
         TT := TT*oo;
      else
         // o := t^-1;
         oo := SLP.3^-1;
         // o := o^(delta^-Z!((r-1)/2));
         oo := oo^(SLP.1^-Z!((r-1)/2));
         // o := (o^s)^Z!Eltseq(BB)[r];
         oo := (oo^SLP.2)^Z!Eltseq(BB)[r];
         // T := T*o;
         TT := TT*oo;
      end if;
   end for;

   return TT;
end function;

/* This function gets a 1 in the [1, 1] position of A. 
   S1 and S2 are SLPs. */

GetAOne := procedure(~A, ~S1, ~S2)

   SLP := Parent(S1);
   F := BaseRing(A);
   w := PrimitiveElement(F);
   d := Nrows(A);
   Z := IntegerRing();

   if A[1, 1] ne 1 then
      i := 2;
      while A[1, i] eq 0 do
         i := i+1;
         if i eq d+1 then break; end if;
      end while;

      if i eq d+1 then
         // A := A*t;
         AddColumn(~A, 1, 1, 2);
         S2 := S2*SLP.3;
         i := 2;
      end if;
   
      if i eq 2 then
         /* here we add the necessary multiple of column 2
            to column 1 to make A[1, 1] = 1 */

         BB := (1-A[1, 1])/A[1, 2];
         TT := GetBBTransvection(BB, SLP);
         AddColumn(~A, BB, 2, 1);
         // A := A*T;
         S2 := S2*TT;
      else
         /* the case where A[1, 2] = 0; 
            we move the non-zero entry to position 4 */
         BB := (1-A[1, 1])/A[1, i];
         TT := GetBBTransvection(BB, SLP);

         /* decide which block the non-zero entry is in */
         if IsEven(i) then j := i div 2; else j := Z!(i/2 + 1/2); end if;

         /* we get the non-zero entry into the second block*/
         if j eq 2 then
            A := A;
         else
            /* A := A*(u*v^-1)^(j-2)*(u*v)^(j-2)*(u*v^-1)^(j-2)*(u*v)^(j-2)*u;
               swaps block 2 with block j to get the block
               with the non-zero entry as the second block of A
            */
            SwapColumns(~A, 3, 2*j - 1);
            SwapColumns(~A, 4, 2*j);
            S2 := S2*(SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*
                     (SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4;
         end if;

         /* A := A*s;
           puts the entry you wish to make equal to 1 in A[1, 2] */
         MultiplyColumn(~A, -1, 1);
         SwapColumns(~A, 1, 2);
         S2 := S2*SLP.2;
         /* A := A*u;
           puts the entry you wish to make equal to 1 in A[1, 4]
         */
         SwapColumns(~A, 1, 3);
         SwapColumns(~A, 2, 4);
         S2 := S2 * SLP.4;
      
         /* we now add column 4 to 1 and column 2 to 3 in order that,
            when we stick all the columns back again, there will be a
            non-zero entry in the A[1, 2] position
         */
         if IsEven(i) then 
            // A := A*x;
            AddColumn(~A, 1, 4, 1);
            AddColumn(~A, 1, 2, 3);
            S2 := S2*SLP.6;
         else
            // A := A*s*x*(s^-1);
            MultiplyColumn(~A, -1, 1); // s
            SwapColumns(~A, 1, 2); // s
            AddColumn(~A, 1, 4, 1); // x
            AddColumn(~A, 1, 2, 3); // x
            SwapColumns(~A, 1, 2); // s^-1
            MultiplyColumn(~A, -1, 1); // s^-1
            S2 := S2*SLP.2*SLP.6*(SLP.2 ^-1);
         end if;
      
         /* we now proceed to stick all the columns back again */
         // A := A*(u^-1);
         SwapColumns(~A, 1, 3);
         SwapColumns(~A, 2, 4);
         S2 := S2*(SLP.4 ^-1);
         // A := A*(s^-1);
         SwapColumns(~A, 1, 2); // s^-1
         MultiplyColumn(~A, -1, 1); // s^-1
         S2 := S2*(SLP.2 ^-1);
         if j ne 2 then
            /* A*(((u*v^-1)^(j-2)*(u*v)^(j-2)*(u*v^-1)^(j-2)*(u*v)^(j-2)*u)^-1)
               swaps block 2 with block j
            */
	    SwapColumns(~A, 3, 2*j -1);
	    SwapColumns(~A, 4, 2*j);
            S2 := S2*(((SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5) ^(j-2)*
                  (SLP.4*SLP.5^-1)^(j-2)*(SLP.4*SLP.5)^(j-2)*SLP.4)^-1);
         end if;
         BB := (1-A[1, 1])/A[1, 2];
         TT := GetBBTransvection(BB, SLP);
         // A := A*T;
         AddColumn(~A, BB, 2, 1);
         S2 := S2*TT;
      end if;
   end if;

   assert A[1, 1] eq 1;
end procedure;

intrinsic SymplecticWordInGen(G:: GrpMat, A:: GrpMatElt) -> BoolElt, GrpSLPElt
{write A as SLP in standard generators of Sp}

   W := SLPGroup(6);
   d := Dimension(G);
   F := BaseRing(G);
   w := PrimitiveElement(F);
   G := SL(d, F);
   e := Degree(F);
   CB := ChangeOfBasisMatrix(G);
   A := G!(A^CB);

   // GG := sub<SL(d, q)|delta, s, t, u, v, x>;
   SLP := SLPGroup(6);
   S1 := Id(SLP);
   S2 := Id(SLP);
   Z := IntegerRing();

   /* Originally the algorithm was defined on a different
      generating set. This algorithm maps the old generating
      set to the new one. */
   phi := hom<SLP -> W|W.4, W.1^-1, W.3, W.5, W.2, W.6^(W.2^2)>;

   /* We wish to find the matrix whose top row is [1 w 0 .. 0],
      has 1s on the leading diagonal and 0s everywhere else.
      We construct the subfield FF of F generated by w^2. This
      subfield has order greater than half of the order of F
      and hence is equal to F. By then coercing w into FF, magma
      will write w as a polynomial py in powers of the generator
      of FF. So w is written as a polynomial in w^2.
      t^(delta^-1) gives us the matrix with [1 w^2 0 .. 0] on
      the top row and t^(delta^-a) gives you the matrix with
      [1 w^2a 0 .. 0] on the top row. Hence, you can use py to
      find the powers of t^(delta^-1) needed to give the matrix
      with [1 w 0 .. 0] on the top row.
   */

   FF := sub<F|w^2>;
   /* FF.1 eq (F.1)^2;
      this will be true due to above comment */
   py := FF!F.1;

   /*py is now a polynomial in w^2 that is equal to w*/

   // O := Id(G);
   OO := Id(SLP);
   for i in [1..e] do
      // O := O*(t^delta^-(i-1))^Z!Eltseq(py)[i];
      OO := OO*(SLP.3^SLP.1^-(i-1))^Z!Eltseq(py)[i];
   end for;

   /* the number of blocks preserved by the Weyl group */
   block := d div 2;

   /* kill the A[1, 3] entry */
   KillPlace := procedure(~A, ~S1, ~S2)
      aa := Eltseq(A[1, 3]);
      for r in [1..e] do
         S2 := S2*((SLP.6^(SLP.1^(r-1)))^Z!aa[r]);
         // A := A*((x^(delta^(r-1)))^Z!aa[r]);
      end for;
      AddColumn(~A, A[1, 3], 4, 1);
      AddColumn(~A, A[1, 3], 2, 3);
   end procedure;

   for k in [1..block] do
      GetAOne(~A, ~S1, ~S2);

      /* A := A*s;
         swaps first two columns */
      MultiplyColumn(~A, -1, 1); // s
      SwapColumns(~A, 1, 2); // s
      S2 := S2*SLP.2;

      for l in [1..block-1] do
         KillPlace(~A, ~S1, ~S2);
         /* A := A*u*s*u;
            swaps the third and fourth columns so that 
            we can work on the f part of the block */
         SwapColumns(~A, 3, 4);
         MultiplyColumn(~A, -1, 4);
         S2 := S2*SLP.4*SLP.2*SLP.4;

         KillPlace(~A, ~S1, ~S2);
         /* A := A*((u*s*u)^-1);
            swaps the third and fourth columns back again */
         MultiplyColumn(~A, -1, 4);
         SwapColumns(~A, 3, 4);
         S2 := S2*((SLP.4*SLP.2*SLP.4)^-1);
         /* A := A*(v*u);
            vu is the (2..d/2) cycle on the blocks */
         for i in [2..(d div 2 - 1)] do
            SwapColumns(~A, 2*i - 1, d-1);
            SwapColumns(~A, 2*i, d);
         end for;
         S2 := S2*(SLP.5*SLP.4);
      end for;

      /* A := A*(s^-1);
         swaps first two columns back again */
      SwapColumns(~A, 1, 2); // s^-1
      MultiplyColumn(~A, -1, 1); // s^-1
      S2 := S2*(SLP.2^-1);
      S2 := S2*(SLP.3^Z!-Eltseq(A[1, 2])[1]);

      // A := A*(t^Z!-Eltseq(A[1, 2])[1]);
      // T := Id(G);
      TT := Id(SLP);
      for r in [2..e] do
         if IsEven(r) then
            // o := O^(delta^-((r-2) div 2));
            oo := OO^(SLP.1^-((r-2) div 2));
            // o := o^Z!Eltseq(A[1, 2])[r];
            oo := oo^Z!Eltseq(A[1, 2])[r];
            // T := T*o;
            TT := TT*oo;
         else
            // o := t^(delta^-Z!((r-1) div 2));
            oo := SLP.3^(SLP.1^-Z!((r-1) div 2));
            // o := o^Z!Eltseq(A[1, 2])[r];
            oo := oo^Z!Eltseq(A[1, 2])[r];
            // T := T*o;
            TT := TT*oo;
         end if;
      end for;
      // A := A*(T^-1);
      for r in [1..e] do
         AddColumn(~A, -Eltseq(A[1, 2])[r]*w^(r-1), 1, 2);
      end for;
      S2 := S2*(TT^-1);

      /* now we do the second row */

      // A := s*A; // swaps the first two rows
      SwapRows(~A, 1, 2);
      MultiplyRow(~A, -1, 1);
      S1 := SLP.2*S1;

      for l in [1..block-1] do
         KillPlace(~A, ~S1, ~S2);
         /* A := A*u*s*u;
            swaps the third and fourth columns so that we can 
            work on the f part of the block */
         SwapColumns(~A, 3, 4);
         MultiplyColumn(~A, -1, 4);
         S2 := S2*SLP.4*SLP.2*SLP.4;

         KillPlace(~A, ~S1, ~S2);
         /* A := A*((u*s*u)^-1);
            swaps the third and fourth columns back again */
         MultiplyColumn(~A, -1, 4);
         SwapColumns(~A, 3, 4);
         S2 := S2*((SLP.4*SLP.2*SLP.4)^-1);

         // A := A*(v*u);
         for i in [2..(d/2 - 1)] do
            SwapColumns(~A, 2*i - 1, d-1);
            SwapColumns(~A, 2*i, d);
         end for;
         S2 := S2*(SLP.5*SLP.4);
      end for;

      /* A := A*(s^-1);
         swaps first two columns back again */
      SwapColumns(~A, 1, 2);
      MultiplyColumn(~A, -1, 1);
      S2 := S2*(SLP.2 ^-1);

      S2 := S2*(SLP.3^Z!-Eltseq(A[1, 2])[1]);
      // A := A*(t^Z!-Eltseq(A[1, 2])[1]);
      // T := Id(G);
      TT := Id(SLP);
      for r in [2..e] do
         if IsEven(r) then
            // o := O^(delta^-((r-2) div 2));
            oo := OO^(SLP.1^-((r-2) div 2));
            // o := o^Z!Eltseq(A[1, 2])[r];
            oo := oo^Z!Eltseq(A[1, 2])[r];
            // T := T*o;
            TT := TT*oo;
         else
            // o := t^(delta^-((r-1) div 2));
            oo := SLP.3^(SLP.1^-((r-1) div 2));
            // o := o^Z!Eltseq(A[1, 2])[r];
            oo := oo^Z!Eltseq(A[1, 2])[r];
            // T := T*o;
            TT := TT*oo;
         end if;
      end for;
      // A := A*(T^-1);
      S2 := S2*(TT^-1);
      for r in [1..e] do
         AddColumn(~A, -Eltseq(A[1, 2])[r]*w^(r-1), 1, 2);
      end for;

      // A := A^(v^-1);
      B := Transpose(A);
      C := ZeroMatrix(F, d, d);
      for i in [1..d-2] do
         C[i] := B[i + 2];
      end for;
      C[d-1] := B[1];
      C[d] := B[2];
      A := Transpose(C);

      C := ZeroMatrix(F, d, d);
      B := A;
      for i in [1..d-2] do
         C[i] := B[i + 2];
      end for;
      C[d-1] := B[1];
      C[d] := B[2];
      A := C;
   
      S2 := S2*(SLP.5^-1);
      S1 := (SLP.5)*S1;
   end for;

   word := (S1^-1)*(S2^-1);
   word := phi(word);

   return IsIdentity(A), word;
end intrinsic;
