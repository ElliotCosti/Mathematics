load "C:/Users/Elliot/Documents/Mathematics/Ruth2 - 18.txt";
load "C:/Users/Elliot/Documents/Mathematics/SymplecticClean5.txt";
load "C:/Users/Elliot/Documents/Mathematics/MatrixPGroup9.txt";
load "C:/Users/Elliot/Documents/Mathematics/standard.m";

Attach("C:/Users/Elliot/Documents/Mathematics/GetSpU2.txt");
AddAttribute(Category(GL(2, 2)), "Module");
AddAttribute(Category(GL(2, 2)), "PG1");
AddAttribute(Category(GL(2, 2)), "PG2");
AddAttribute(Category(GL(2, 2)), "PG3");

/* preparing the input */

G := Sp(6, 7^3);
QQ := SpChosenElements(G);
CB := ChangeOfBasisMatrix(G);
Q := [ExteriorSquare(QQ[i]): i in [1..#QQ]];
n := Degree(Q[1]);
q := #BaseRing(G);
d := Degree(G);
A := Random(GL(n, q));
Q := Q^A;
E := sub<GL(n, q)|Q>;
qq := q;

/* Q is the set of generators of E - the alternative representation;
   g is the element that we need to find in terms of the generators,
   d is the dimension of the natural representation
   and qq is the size of the field of the natural representation
*/

SpAltRepWordInGen := function(E, Q, g, d, qq);

   q := #BaseRing(Q[1]);
   F := GF(q);
   w := PrimitiveElement(F); 
   M := KMatrixSpace(F, d, d);
   b := Basis(M);
   G := SL(d, qq);
   n := Degree(Q[1]);
   e := Degree(F);
   QQ := SpChosenElements(Sp(d, qq));

   CB := ChangeOfBasisMatrix(Sp(d, qq));

   U := GetSpU(E, Q, d, qq);
   U1 := U[1];
   U2 := U[2];

   K, kk, S := GetSpK(E, Q, d, qq);
   KE := K[1];
   KE2 := K[2];
   S1 := S[2];
   S := S[1];

   W := U1^g;
   J1, J2, x, xslp := UnipotentStabiliser(KE, U1:ComputeBase := false);
   L1, L2, y, yslp := UnipotentStabiliser(KE, W: ComputeBase := false);

   Ubar := U1;
   /* U^g*y*x^-1 eq U should be true. */

   /* This code permutes the columns of g until we get a non-zero
      entry in the (1, 1) position of the natural module.
   */

   vpower := 0;
   spower := 0;
   bool := (W^(y*x^-1) eq U1);
   temp := g;
   v := Q[2];
   s := Q[1];
   while bool eq false do
      g := g*v;
      vpower := vpower + 1;
      W := U1^g;
      J1, J2, x, xslp := UnipotentStabiliser(KE, U1:
         ComputeBase := false);
      L1, L2, y, yslp := UnipotentStabiliser(KE, W:ComputeBase
         := false);
      bool := (W^(y*x^-1) eq U1);
      if vpower gt d then
         vpower := 0;
         g := temp;
         break;
      end if;
   end while;
   while bool eq false do
      spower := 1;
      g := g*v*s;
      vpower := vpower + 1;
      W := U1^g;
      J1, J2, x, xslp := UnipotentStabiliser(KE, U1:
         ComputeBase := false);
      L1, L2, y, yslp := UnipotentStabiliser(KE, W
         :ComputeBase := false);
      bool := (W^(y*x^-1) eq U1);
      if bool eq false then g := g*(s^-1); end if;
      if vpower gt d then return false, _, _; end if;
   end while;

   /* We have now killed the top row of the preimage of g. We now do
      the same to the second row
   */

   h := g*y*x^-1;
   W := U2^h;
   J1, J2, x, xslp1 := UnipotentStabiliser(KE2, U2: ComputeBase :=
   false);
   L1, L2, y, yslp1 := UnipotentStabiliser(KE2, W: ComputeBase :=
   false);

   /* We check that J2 eq L2. We do not need to perform the vpower
      while loop above because we know that the top left hand corner of
      the pre-image of g cannot now be 0.
   */

   if J2 ne L2 then return false, _, _; end if;

   /* this has zeroes in the first two rows and columns in the
      natural rep (except the (1, 1) and (1, 2) places)
   */
   a := h*y*x^-1;

   t := QQ[3];
   delta := QQ[4];
   u := QQ[5];
   v := QQ[2];
   x := QQ[6]^(QQ[2]^2);
   s := QQ[1]^-1;
   KQ := [];
   Append(~KQ, Transpose(t));
   Append(~KQ, x^(s^u));
   Append(~KQ, x);
   for i in [1..(d div 2) - 2] do
      Append(~KQ, x^((s^u)*(v*u)^i));
      Append(~KQ, x^((v*u)^i));
   end for;

   for i in [1..#KQ] do
      KQ[i] := Transpose(KQ[i]);
   end for;

   kq := [];
   for i in [1..#KQ] do
      _, blob := SymplecticWordInGen(Sp(d, F), KQ[i]^(CB^-1));
      Append(~kq, Evaluate(blob, Q));
   end for;

   Y := [];
   for i in [1..#kq] do
      /* these all should be multiples of the generators of KE
         meaning you can solve the equation (x_1 .. x_d) = (y_1 .. y_d)A
         in the lower dimension, where A is the untouched d-1 * d-1
         portion of the matrix g
      */
      Append(~Y, kq[i]^a);
   end for;

   /* So Y[1], for example, is the image of a matrix whose second row
      is the top row of A. Hence it will be some linear combination
      of generators of KE.
   */

   /* we calculate what each Y[i] is in the natural representation */
   Z := [];
   for i in [1..d-1] do
      Z[i] := Evaluate(MatrixPGroupWordInGen(Y[i], KE: ComputeBase := false), S);
   end for;

   /* constructing the preimage of a */
   aa := M!b[1];
   for i in [1..d-1] do;
      for j in [2..d] do;
         aa := aa + Z[i][1, j] * b[d*i + j];
      end for;
   end for;

   bool := false;
   det := Determinant(aa);
   g := temp;
   p := Characteristic (F);
   P := PolynomialRing(GF(q));
   py := P.1^d - det;
   Scalars := <>;
   for i in [1..p-1] do
      for j in [0..e-1] do
         Append(~Scalars, ScalarMatrix(n, i)*w^j);
      end for;
   end for;
   Scalars := sub<GL(n, q)|[Scalars[i] : i in [1..#Scalars]]>;

   v := Q[2];
   s := Q[1];
   sq := Root(det, d); // may give wrong answer as multivalued.
   word := sq^-1 * aa * Evaluate(xslp1, S1) * Evaluate(yslp1^-1, S1)
      * Evaluate(xslp, S) * Evaluate(yslp^-1, S);
   flag, word := SymplecticWordInGen(Sp(d, F), word^(CB^-1));
   
   if (flag ne Id(Sp(d, F))) then
      _, J := SymplecticForm(Sp(d, F));
      J := CB^-1*J*CB;
      j := Root((Transpose(aa)*J*aa)[1, 2], 2);
      aa := aa/j;
      sq := 1;
      py := P.1^d - 1;
      word := sq^-1 * aa * Evaluate(xslp1, S1) * Evaluate(yslp1^-1, S1)
         * Evaluate(xslp, S) * Evaluate(yslp^-1, S);
      flag, word := SymplecticWordInGen(Sp(d, F), word^(CB^-1));
      bool := Evaluate(word, Q) eq g * (v^-1)^-vpower * (s^-1)^-spower;
   end if;
   
   if Determinant(aa) ne 1 then
      while flag ne Id(Sp(d, F)) do
         sq := Root(det, d); // may give wrong answer as multivalued.
         word := sq^-1 * aa * Evaluate(xslp1, S1) * Evaluate(yslp1^-1,
            S1) * Evaluate(xslp, S) * Evaluate(yslp^-1, S);
         flag, word := SymplecticWordInGen(Sp(d, F), word^(CB^-1));
      end while;
   end if;

   bool := Evaluate(word, Q) eq g * (v^-1)^-vpower * (s^-1)^-spower;

   scalar := Evaluate(word, Q)/(g  * (v^-1)^-vpower * (s^-1)^-spower);

   if bool eq false then
      if not IsScalar(scalar) then
         bool := false;
      else
         roots := Roots(py);
         for j in [1..#roots] do
            word := roots[j, 1]^-1 * aa * Evaluate(xslp1, S1) *
            Evaluate(yslp1^-1, S1) * Evaluate(xslp, S) *
            Evaluate(yslp^-1, S);
            _, word := SymplecticWordInGen(G, word^(CB^-1));
            bool := Evaluate(word, Q) eq g * (v^-1)^-vpower
               * (s^-1)^-spower;
            if bool then scalar := Id(Parent(g)); break j; end if;
         end for;
      end if;
   end if;

   word := word * ((Parent(word).1)^-1)^spower
      * ((Parent(word).2)^-1)^vpower;

   if scalar eq Id(Parent(g)) then
      flag := Evaluate(word, Q) eq g;
   else
      flag := false;
   end if;

   return flag, scalar[1, 1], word;
		
end function;
