RandomSpace := function (d, q, k) 
V := VectorSpace (GF(q), d); 
U := sub < V | [Random (V): i in [1..k]]>; 
return U; 
end function; 

d := 30;
q := 2;

for i in [1..100] do 
d, q, i; 
S := [RandomSpace (d, q, Random ([1..d div 2])): k in [1..d div 3]]; 
U := RandomSpace (d, q, Random ([1..d div 2])); 
A,B := StabiliserOfSpaces (S); 
H := sub < GL(d, q) | B>; 
// time RandomSchreier (H); 
a,b,c,w:= MyUnipotentStabiliser (H, U: ComputeBase:=true); 

/*
if Ngens(H) eq 0 then
   X := H;
else
   time X := Stabiliser (H, U); 
end if;
assert a eq X; 
*/

for j in [1..10] do
   h := Random(H);
   _, b1, _, _:= MyUnipotentStabiliser (H, U^h: ComputeBase:=true); 
   assert b eq b1;
end for;

assert U^a eq {U}; 
assert U^c eq b; 
W, phi := WordGroup (H); 
assert phi (w) eq c; 
end for; 
