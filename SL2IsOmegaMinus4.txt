/* preparing the input */
load "MatrixPGroup4";
load "Ruth2-5.txt";
load "Desktop/NZ/CD/clean4.m";
load "Desktop/NZ/sminus.m";

G := SL(2, 7^2);

d := 2;
n := 4;
q := #BaseRing(G);
F<w> := GF(q);
e := Degree(F);
p := Characteristic(F);
FF := GF(p^(e div 2));

Q := MinusChosenElements(OmegaMinus(4, FF));

E := sub<GL(4, F)| Q>;

E := sub<GL(n, q)|delta, t, u, v>;

/* E is the alternative representation and the generators have to be set up 
so that they are in the above order; g is the element that we need to find 
in terms of the generators and d is the dimension of the natural 
representation */

AltRepWordInGen := function(E, g, d);

q := #BaseRing(E);
omega := PrimitiveElement(GF(q));
w := omega;
M := KMatrixSpace(GF(q), d, d);
b := Basis(M);
G := SL(d, q);
n := Degree(E);

/* creating H. H is the subgroup of G that fixes the first basis element of 
the natural module. As this has a p-local subgroup, it affords a 
1-dimensional submodule in the natural dimension. */

Ht := M!Id(G) + b[d+3];
   Ht := G!Ht;
Hu := M!Id(G) - b[d+2] - b[d+3] - b[2*d+3] + b[2*d+2];
   Hu := G!Hu;
Hv := b[d*d -d +2] + b[1];
   for i in [1..(d-2)] do
      Hv := Hv - b[i*d + i + 2];
    end for;
   Hv := G!Hv;
Hdelta := M!Id(G) -b[d+2] -b[2*d+3] + w*b[d+2] + (w^-1)*b[2*d+3];
   Hdelta := G!Hdelta;
Htt := M!Id(G) + b[d+1];
   Htt := G!Htt;
Hplus := M!Id(G) -b[1] -b[d+2] + w*b[1] + (w^-1)*b[d+2];
   Hplus := G!Hplus;
/* the element that will make H q^(d-1):GL(d, q) as opposed to q^(d-1):SL(d, 
q) */

H := sub<GL(d, q)|Ht, Hu, Hv, Hdelta, Htt, Hplus>;
/* H here is q^(d-1):GL(d, q) and q^(d-1) is the normal p-sg */

/* we now map H to the non-natural representation. */

Q := [];
for i in [1..4] do
   Append(~Q, E.i);
end for;
v := Q[4];

_, Hu1 := WordInGen(G, Hu);
Hu1:= Evaluate(Hu1, Q);
_, Hv1 := WordInGen(G, Hv);
Hv1:= Evaluate(Hv1, Q);
_, Ht1 := WordInGen(G, Ht);
Ht1:= Evaluate(Ht1, Q);
_, Hdelta1 := WordInGen(G, Hdelta);
Hdelta1:= Evaluate(Hdelta1, Q);
_, Htt1 := WordInGen(G, Htt);
Htt1:= Evaluate(Htt1, Q);
_, Hplus1 := WordInGen(G, Hplus);
Hplus1:= Evaluate(Hplus1, Q);

HE := sub<GL(n, q)| Ht1, Hu1, Hv1, Hdelta1, Htt1, Hplus1>;
// is reducible
VPH := GModule(HE);
flag, U, Uhat := IsIrreducible(VPH);
/* U above is a non-trivial submodule */

/* we now create an elementary abelian p-group K. The generators of K 
consist of those elements with some power of the primitive element in the 
top row (excluding the first position), 1s down the leading diagonal and 0s 
everywhere else */

e := Factorization(q)[1][2];
gg := <Id(G)>;
for j in [1..e] do
   for i in [2..d] do
      Append(~gg, SL(d, q)!(M!Id(G) + (w^(j-1))*b[i]));
   end for;
end for;

K := sub<SL(d, q)|[gg[i] : i in [2..d*e-(e-1)]]>;
// Isomorphic to (C_q)^(d-1)
S := [K.i : i in [1..Ngens(K)]];

/* mapping K to the non-natural representation */

kk := <Id(E)>;
for i in [2..(d-1)*e+1] do
   _, blob := WordInGen(G, gg[i]);
   Append(~kk, Evaluate(blob, Q));
end for;

KE := sub<GL(n, q)|[kk[i] : i in [2..(d-1)*e+1]]>;

V := VectorSpace(GF(q), n);
U := sub<V|[V!VPH!U.i : i in [1..Dimension(U)]]>; /* Here U has been 
rewritten in vectors of length n but the module still has its original 
dimension */

W := sub<VectorSpace(GF(q), n)|[U.i*g : i in [1..Dimension(U)]]>;
// creating U^g = W

Conj := function(W, k)
return sub<VectorSpace(GF(q), n)|[W.i*k : i in [1..Dimension(W)]]>;
// creating W^k
end function;

/* Ruth2. This function maps U and W to a canonical subspace of U and W in 
the orbit of the p-group KE. If the preimage of g in G has a non-zero entry 
in the (1, 1) position, then U and W are in the same orbit of KE and hence 
U^x eq W^y. If the (1, 1) entry is zero however, then U^x ne W^y and so we 
permutes the columns of g until we get a non-zero entry in the (1, 1) 
position.  */

ComputeBase := false;
J1, J2, x, xslp := UnipotentStabiliser(KE, U);
L1, L2, y, yslp := UnipotentStabiliser(KE, W);

/* This code permutes the columns of g until we get a non-zero entry in the 
(1, 1) position of the natural module. */

vpower := 0;
bool := (Conj(W, y*x^-1) eq U);
temp := g;
while bool eq false do
   g := g*v;
   vpower := vpower + 1;
   W := sub<VectorSpace(GF(q), n)|[U.i*g : i in [1..Dimension(U)]]>;
// creating U^g = W
   J1, J2, x, xslp := UnipotentStabiliser(KE, U);
   J1, J2, y, yslp := UnipotentStabiliser(KE, W);
       bool := (Conj(W, y*x^-1) eq U);
end while; // should be true

// g*y*x^-1 should now be in H


/* We have now killed the top row of the preimage of g. We know dualise this 
and do the same to first column. */

gg := <Id(G)>;
for j in [1..e] do
   for i in [1..d-1] do
      Append(~gg, SL(d, q)!(M!Id(G) + (w^(j-1)) * b[d*i+1]));
   end for;
end for;

K := sub<SL(d, q)|[gg[i] : i in [2..#gg]]>;
S1 := [K.i : i in [1..Ngens(K)]];

kk2 := <Id(E)>;
for i in [2..#gg] do
   _, blob := WordInGen(G, gg[i]);
   Append(~kk2, Evaluate(blob, Q));
end for;

KE2 := sub<GL(n, q)|[kk2[i] : i in [2..#gg]]>;

Ht := M!Id(G) + b[2*d+2];
   Ht := G!Ht;
Htt := M!Id(G) + b[2];
   Htt := G!Htt;
H := sub<GL(d, q)|Ht, Hu, Hv, Hdelta, Htt, Hplus>;
// H here is q^(d-1):GL(d, q) and q^(d-1) is the normal p-sg

_, Hu1 := WordInGen(G, Hu);
Hu:= Evaluate(Hu1, Q);
_, Hv1 := WordInGen(G, Hv);
Hv:= Evaluate(Hv1, Q);
_, Ht1 := WordInGen(G, Ht);
Ht:= Evaluate(Ht1, Q);
_, Hdelta1 := WordInGen(G, Hdelta);
Hdelta:= Evaluate(Hdelta1, Q);
_, Htt1 := WordInGen(G, Htt);
Htt:= Evaluate(Htt1, Q);
_, Hplus1 := WordInGen(G, Hplus);
Hplus:= Evaluate(Hplus1, Q);

HE2 := sub<GL(n, q)| Ht, Hu, Hv, Hdelta, Htt, Hplus>;
// is reducible

VPH2 := GModule(HE2);
flag, U, Uhat := IsIrreducible(VPH2);
U := sub<V|[V!VPH2!U.i : i in [1..Dimension(U)]]>;

h := g*y*x^-1;

W := sub<VectorSpace(GF(q), n)|[U.i*h : i in [1..Dimension(U)]]>;
// creating U^h = W

ComputeBase := false;
J1, J2, x, xslp1 := UnipotentStabiliser(KE2, U);
L1, L2, y, yslp1 := UnipotentStabiliser(KE2, W);

/* No need to perform the checks as before as we know that the top left hand 
corner cannot now be 0 in the natural representation. */

a := h*y*x^-1; /* this has zeroes in the first row and column in the natural 
rep (except the 1, 1 place) */

Y := [];
for i in [2..#kk] do
   Append(~Y, kk[i]^a);

/* these all should be multiples of the generators
of KE meaning you can solve the equation (x_1 .. x_d) = (y_1 .. y_d)A in the 
lower dimension, where A is the untouched d-1 * d-1 portion of the matrix g */

end for;

/* So Y[1], for example, is the image of a matrix whose top row is the top 
row of A. Hence it will be some linear combination of generators of KE. */

/* psi := hom<G -> E | (E!ActionGenerators(VE)[1])^A, 
(E!ActionGenerators(VE)[2])^A>;
(psi^-1)(a); */

/* we calculate what each Y[i] is in the natural representation */
Z := [];
for i in [1..d-1] do
   Z[i] := Evaluate(MatrixPGroupWordInGen(Y[i], KE), S);
end for;

/* constructing the preimage of a */
aa := M!b[1];
for i in [1..d-1] do;
   for j in [2..d] do;
      aa := aa + Z[i][1, j] * b[d*i + j];
   end for;
end for;

/* aa * Evaluate(xslp1, S1) * Evaluate(yslp1^-1, S1) * Evaluate(xslp, S) * 
Evaluate(yslp^-1, S); */

bool := false;
QQ := [Q[i] : i in [1..#Q]];
det := Determinant(aa);
g := temp;
p := Factorisation(q)[1][1];
Scalars := <>;
for i in [1..p-1] do
   for j in [0..e-1] do
      Append(~Scalars, ScalarMatrix(n, i)*w^j);
   end for;
end for;

while bool eq false do
   sq := Root(det, d); /* may give wrong answer as multivalued. */

   word := sq^-1 * aa * Evaluate(xslp1, S1) * Evaluate(yslp1^-1, S1) * 
Evaluate(xslp, S) * Evaluate(yslp^-1, S);

_, word := WordInGen(G, word);

   bool := Evaluate(word, QQ) eq g * (v^-1)^-vpower;

scalar := ZeroMatrix(GF(q), n, n);
   if bool eq false then
      scalar := Evaluate(word, QQ)/(g* (v^-1)^-vpower);
      if IsScalar(scalar) then bool := true; end if;
   end if;

end while;

word := word * ((Parent(word).4)^-1)^vpower;

if scalar eq ZeroMatrix(GF(q), n, n) then
   flag := Evaluate(word, QQ) eq g;
else
   flag := Evaluate(word, QQ)/scalar eq g;
end if;
return word, scalar[1, 1], flag;

end function;

