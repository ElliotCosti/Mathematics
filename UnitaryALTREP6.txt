load "C:/Users/Elliot/Documents/Mathematics/standard.m";
load "C:/Users/Elliot/Documents/Mathematics/MatrixPGroup9.txt";
load "C:/Users/Elliot/Documents/Mathematics/Ruth2 - 18.txt";
load "C:/Users/Elliot/Documents/Mathematics/Unitary7.txt";

/* preparing the input */

G := SU(8, 7);

d := Dimension(G);
q := #BaseRing(G);
F := GF(q);
w := PrimitiveElement(F);

_, CB := CreateUnitaryGenerators(G);
QQ := SUChosenElements(G);
GG := sub<SL(d, F)|QQ>;

VG := GModule(GG); 
VE := ExteriorSquare(VG); 
n := Dimension(VE);

Ebar := sub<GL(n, F) | [ActionGenerators(VE)[i] : i in [1..#ActionGenerators(VE)]]>;

P := RandomProcess(Ebar);
A := Random(P);

QQQ := [];
for i in [1..#QQ] do
   Append(~QQQ, (ExteriorSquare(QQ[i])));
end for;

/* conjugating everything by a random matrix to make the exterior square look random */
Q := [];
for i in [1..#QQ] do
   _, word := UnitaryWordInGen(G, QQ[i]^(CB^-1));
   Append(~Q, Evaluate(word, QQQ)^A);
end for;

E := sub<GL(n, q)|Q>;

/* returns the matrix with alpha^3 in its [1, 2] slot */

GetO := function(Q, d, qq)

   q := #BaseRing(Q[1]);
   F := GF(q);
   w := PrimitiveElement(GF(qq));
   t := Q[3];
   delta := Q[4];
   Z := IntegerRing();
   e := Factorization(qq)[1][2];
   alpha := t[1, 2];

   FF := sub<F|alpha^4>;
   py := FF!(alpha^2);
   
   /* py is now a polynomial in alpha^4 that is equal to alpha^2
      Hence, this polynomial multiplied by alpha is a polynomial
      equal to alpha^3 looking like this: a_1 alpha + a_5 alpha^5
      + a_9 alpha^9 + a_13 alpha^13 + ....
   */

   O := Id(Parent(Q[1]));
   for i in [1..#Eltseq(py)] do
      O := O*(t^delta^-(i-1))^Z!Eltseq(py)[i];
   end for;

   return O;

end function;

/* Q is the set of generators of E - the alternative representation;
   g is the element that we need to find in terms of the generators
   and d is the dimension of the natural representation
*/

UnitaryAltRepWordInGen := function(E, Q, g, d, qq);

   F := BaseRing(Q[1]);
   q := #F;
   w := PrimitiveElement(GF(qq)); 
   M := KMatrixSpace(GF(qq), d, d);
   b := Basis(M);
   G := SL(d, GF(qq));
   n := Degree(Q[1]);
   e := Degree(GF(qq));
   QQ := SUChosenElements(SU(d, GF(qq)));

   CB := ZeroMatrix(GF(qq), d, d);
   for i in [1..IntegerRing()!(d/2)] do
      CB := CB + b[(i-1)*d + 2*i - 1];
   end for;
   for i in [1..IntegerRing()!(d/2)] do
      CB := CB + b[IntegerRing()!(d/2)*d + i*d - 2*i + 2];
   end for;
   CB := SL(d, qq)!CB;

   /* creating H. H is the subgroup of G that fixes the first two
      bases elements of the natural module. As this has a p-local
      subgroup, it affords a 2-dimensional submodule in the natural
      dimension.
   */

   if d ne 2 then
      HQ := [];
      QG := SUChosenElements(SU(d-2, GF(qq)));
      for i in [1..#QG] do
         Append (~HQ, G!InsertBlock(Id(G), QG[i], 3, 3));
      end for;
      Append(~HQ, QQ[7]);
      Append(~HQ, QQ[6]^(QQ[2]^2));
   else
      HQ := [QQ[4], QQ[3]];
   end if;

   /* H is the stabiliser of the first basis vector of the natural
      module
   */
   H := sub<GL(d, qq)|HQ>; 

   /* we now map H to the non-natural representation. */

   s := Q[1];
   v := Q[2];
   t := Q[3];
   delta := Q[4];
   u := Q[5];
   x := Q[6];
   y := Q[7];

   HEQ := [s^v, v*u, u^v, t^v, delta^v, x, y, x^(v^2)];
   if d eq 6 then
      HEQ := [s^v, u^v, t^v, delta^v, x, y, x^(v^-1)];
   end if;
   if d eq 4 then
      HEQ := [s^v, t^v, delta^v, y, x];
   end if;
   if d eq 2 then
      HEQ := [delta, t];
   end if;

   /* HE is reducible. U is a non-trivial submodule. */
   HE := sub<GL(n, q)| HEQ>;
   VPH := GModule(HE);
   flag, U, Uhat := IsIrreducible(VPH);
   
   /* we now create an elementary abelian p-group K. The generators
      of K consist of those elements with some power of the primitive
      element in the top row (excluding the first position), 1s down
      the leading diagonal and 0s everywhere else
   */

   t := QQ[3];
   x := QQ[6]^(QQ[2]^2);
   u := QQ[5];
   v := QQ[2];
   s := QQ[1];
   y := QQ[7]^(QQ[2]^2);
   alpha := t[1, 2];


   FF := sub<GF(qq)|w^2>;
   py := FF!w;
   Z := IntegerRing();

   OX := Id(SL(d, GF(qq)));
   for i in [1..e] do
      OX := OX*(x^(y^-(i-1)))^Z!Eltseq(py)[i];
   end for;

   KQ := [];
   for j in [1..(e div 2)] do
      Append(~KQ, t^(y^-(j-1)));
      for i in [0..(d div 2) - 2] do
         Append(~KQ, (x^(y^-(j-1)))^((v*u)^i));
         Append(~KQ, (((x^(y^-(j-1)))^(y^2))^(u*s))^((v*u)^i));
      end for;
      for i in [0..(d div 2) - 2] do
         Append(~KQ, (OX^(y^-(j-1)))^((v*u)^i));
         Append(~KQ, (((OX^(y^-(j-1)))^(y^2))^(u*s))^((v*u)^i));
      end for;
   end for;

   if d eq 2 then
      KQ := [];
      delta := QQ[4];
      O := GetO(QQ, d, qq);
      for j in [1..(e div 2)] do
         if IsOdd(j) then
            T := t^(delta^-((j-1) div 2));
            Append(~KQ, T);
         else
            T := O^(delta^-((j-1) div 2));
            Append(~KQ, T);
         end if;
      end for;
   end if;

   for i in [1..#KQ] do
      KQ[i] := Transpose(KQ[i]);
   end for;

   K := sub<SL(d, GF(qq))|KQ>;

   S := [K.i : i in [1..Ngens(K)]];

   /* mapping K to the non-natural representation */

   kk := <Id(Parent(Q[1]))>;
   for i in [1..#S] do
      _, blob := UnitaryWordInGen(G, S[i]^(CB^-1));
      Append(~kk, Evaluate(blob, Q));
   end for;

   KE := sub<GL(n, q)|[kk[i] : i in [1..#kk]]>;

   /* Here U has been rewritten in vectors of length n but the module
      still has its original dimension
   */
   V := VectorSpace(GF(q), n);
   U := sub<V|[V!VPH!U.i : i in [1..Dimension(U)]]>;

   W := U^g;

   /* Ruth2. This function maps U and W to a canonical
      subspace of U and W in the orbit of the p-group KE.
      If the preimage of g in G has a non-zero entry in
      the (1, 1) position, then U and W are in the same
      orbit of KE and hence U^x eq W^y. If the (1, 1)
      entry is zero however, then U^x ne W^y and so we
      permute the columns of g until we get a non-zero
      entry in the (1, 1) position.
   */

   J1, J2, x, xslp := UnipotentStabiliser(KE, U: ComputeBase := 
   false);
   L1, L2, y, yslp := UnipotentStabiliser(KE, W:ComputeBase :=
   false);

   /* U^g*y*x^-1 eq U should be true. */

   /* This code permutes the columns of g until we get a non-zero
      entry in the (1, 1) position of the natural module.
   */

   vpower := 0;
   spower := 0;
   bool := (W^(y*x^-1) eq U);
   temp := g;
   v := Q[2];
   s := Q[1];
   while bool eq false do
      g := g*v;
      vpower := vpower + 1;
      W := U^g;
      L1, L2, y, yslp := UnipotentStabiliser(KE, W:ComputeBase :=
      false);
      bool := (W^(y*x^-1) eq U);
      if vpower gt d then
         vpower := 0;
         g := temp;
         break;
      end if;
   end while;
   while bool eq false do
      spower := 1;
      g := g*v*s;
      vpower := vpower + 1;
      W := U^g;
      L1, L2, y, yslp := UnipotentStabiliser(KE, W:ComputeBase := 
      false);
      bool := (W^(y*x^-1) eq U);
      if bool eq false then g := g*(s^-1); end if;
      if vpower gt d then return false, _, _; end if;
   end while;

   /* g*y*x^-1 should now be in HE. We have now killed the top row of
      the preimage of g. We now do the same to the second row.
   */

   for i in [1..#KQ] do
      KQ[i] := Transpose(KQ[i]);
   end for;

   K := sub<SL(d, GF(qq))|[KQ[i] : i in [1..#KQ]]>;
   S1 := [K.i : i in [1..Ngens(K)]];

   kk2 := <Id(Parent(Q[1]))>;
   for i in [1..#S1] do
      _, blob := UnitaryWordInGen(G, S1[i]^(CB^-1));
      Append(~kk2, Evaluate(blob, Q));
   end for;

   KE2 := sub<GL(n, q)|[kk2[i] : i in [1..#kk2]]>;

   if d ne 2 then
      Remove(~HQ, Position(HQ, QQ[6]^(QQ[2]^2)));
      Append(~HQ, Transpose(QQ[6]^(QQ[2]^2)));
   else
      HQ := [QQ[4], QQ[3]^QQ[1]];
   end if;

   H := sub<GL(d, qq)|HQ>;

   _, splodge := UnitaryWordInGen(SU(d, GF(qq)), HQ[#HQ]^(CB^-1));
   splodge1:= Evaluate(splodge, Q);

   if d ne 2 then
      Remove(~HEQ, Position(HEQ, Q[6]^(Q[2]^2)));
      Append(~HEQ, splodge1);
   else
      HEQ := [Q[4], Q[3]^Q[1]];
   end if;

   HE2 := sub<GL(n, q)| HEQ>;

   VPH2 := GModule(HE2);
   flag, U, Uhat := IsIrreducible(VPH2);

   UU := CompositionSeries(VPH2);

   h := g*y*x^-1;
   for UUU in UU do
      U := sub<V|[V!VPH2!UUU.i : i in [1..Dimension(UUU)]]>;
      W := U^h;
      J1, J2, x, xslp1 := UnipotentStabiliser(KE2, U:ComputeBase :=
      false);
      L1, L2, y, yslp1 := UnipotentStabiliser(KE2, W:ComputeBase :=
      false);
      if J2 eq L2 then break; end if;
   end for;

   if J2 ne L2 then return false, _, _; end if;
   a := h*y*x^-1;

   /* The elements of Y should be multiples of the generators of KE
     meaning you can solve the equation (x_1 .. x_d) = (y_1 .. y_d)A
     in the lower dimension, where A is the untouched d-1 * d-1
     portion of the matrix g.
   */
   Y := [];
   for i in [1..d-1] do
      Append(~Y, KE2.i^a);
   end for;

   /* we calculate what each Y[i] is in the natural representation */
   Z := [];
   for i in [1..#Y] do
      Z[i] := Evaluate(MatrixPGroupWordInGen(Y[i], KE2: ComputeBase
      := false), S1);
   end for;

   if Evaluate(MatrixPGroupWordInGen(Y[1], KE2), [KE2.i : i in
   [1..Ngens(KE2)]]) ne Y[1]
   then return false, _, _; end if;

   /* constructing the preimage of a */
   aa := M!b[1];
   for j in [2..d] do;
      aa := aa + alpha^-1 * Z[1][1, j] * b[d + j];
   end for;
   for i in [2..d-1] do;
      sign := KQ[i][1, i+1];
      for j in [2..d] do;
         aa := aa + sign^-1 * Z[i][1, j] * b[d*i + j];
      end for;
   end for;

   bool := false;
   det := Determinant(aa);
   g := temp;
   p := Factorisation(q)[1][1];

   /* J here is the matrix respresenting the form */
   J := ZeroMatrix(GF(qq), d, d);
   for i in [1..d] do
      J[i, d-i+1] := 1;
   end for;
   J := CB^-1*J*CB;

   /* returns the "complex" conjugate of a matrix over a finite field
   */

   ConjugateMatrix := function(A);

      F := BaseRing(A);
      d := Degree(A[1]);
      M := KMatrixSpace(GF(qq), d, d);
      Z := M.1 - M.1;
      p := Characteristic(F);
      e := Degree(GF(qq));
 
      for i in [1..d] do
         for j in [1..d] do
            Z[i, j] := A[i, j]^(p^(e div 2));
         end for;
      end for;

      return Z;

   end function;

   GetJ := function(aa);
      P := PolynomialRing(F);
      value := (ConjugateMatrix(Transpose(aa))*J*aa)[1, 2];
      power := Characteristic(F)^(Degree(GF(qq)) div 2) +1;
      root := Root(value, power);
      roots := [root*(w^((q-1) div power))^i : i in [0..power-1]];

      j := 1;
      for i in [1..#roots] do
         if Determinant(aa/roots[i]) eq 1 then
            j := roots[i];
            break i;
         end if;
      end for;
   
      return j;
   end function;

   sq := Root(det, d); /* may give wrong answer as multivalued */
   word := sq^-1 * aa * Evaluate(xslp1, S1) * Evaluate(yslp1^-1, S1)
   * Evaluate(xslp, S) * Evaluate(yslp^-1, S);
   flag, word := UnitaryWordInGen(SU(d, GF(qq)), G!(word)^(CB^-1));

   bool := Evaluate(word, Q) eq g * (v^-1)^-vpower * (s^-1)^-spower;
   scalar := Id(Parent(Q[1]));
   
   aa := aa * sq^-1;
   P := PolynomialRing(GF(qq));
   py := P.1^d - 1;

   scalar := Id(Parent(g));
   if bool eq false then
      scalar := Evaluate(word, Q)/(g* (v^-1)^-vpower *
      (s^-1)^-spower);
      roots := Roots(py);
      for j in [1..#roots] do
         word := roots[j, 1]^-1 * aa * Evaluate(xslp1, S1) *
         Evaluate(yslp1^-1, S1) * Evaluate(xslp, S) *
         Evaluate(yslp^-1, S);
         _, word := UnitaryWordInGen(SU(d, GF(qq)),
         G!(word)^(CB^-1));
         bool := Evaluate(word, Q) eq g * (v^-1)^-vpower *
         (s^-1)^-spower;
         if bool then scalar := Id(Parent(g)); break j; end if;
      end for;
   end if;

   det := Determinant(aa);

   word := word * ((Parent(word).1)^-1)^spower *
   ((Parent(word).2)^-1)^vpower;

   if scalar eq Id(Parent(Q[1])) then
      flag := Evaluate(word, Q) eq g;
   else
      flag := false;
      scalar := Evaluate(word, Q)/g;
   end if;

   return flag, word, scalar[1, 1]^-1;
		
end function;
